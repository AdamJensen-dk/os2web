<?php

/*
 *
 * @author Jesper Mathiassen <jm@bellcom.dk>
 * @copyright Bellcom Open Source aps.
 */

/**
 * Implementation of hook_menu()
 *
 */
function os2web_esdh_provider_menu() {
  $items['admin/config/os2web/esdh_provider'] = array(
      'title' => t('ESDH Provider API status'),
      'access arguments' => array('administer os2web'),
      'page callback' => 'os2web_esdh_provider_status',
      'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/os2web/meetings'] = array(
      'title' => t('Meeting importer'),
      'access arguments' => array('administer os2web'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('os2web_esdh_provider_import_form'),
      'type' => MENU_LOCAL_TASK,
  );
  $items['node/%/info'] = array(
      'page callback' => '_os2web_esdh_provider_node_tab_page',
      'page arguments' => array(1, 3),
      'access callback' => '_os2web_meetings_node_tab_access',
      'access arguments' => array(1),
      'title' => 'Meeting control',
      'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function os2web_esdh_provider_status() {

  $apis = array('cm', 'mm', 'rp');
  $head = array('API name', 'Description', 'module', 'status');
  $rows = array();
  foreach ($apis as $api) {
    $info = ctools_plugin_get_info('os2web_esdh_provider', $api);
    $plugins = ctools_get_plugins('os2web_esdh_provider', $api);
    if (count($plugins) > 0) {
      foreach ($plugins as $plugin) {
        $rows[] = array(
            $api,
            $plugin['description'],
            $plugin['module'],
            os2web_esdh_provider_has_api($api) ? 'Working' : 'Error',
        );
      }
    } else {
      $rows[] = array($api, 'Unavailable', 'Not enabled.', 'Error');
    }
  }
  return '<h2>' . t('ESDH Provider API status') . '</h2>' . theme('table', array('header' => $head, 'rows' => $rows));
}

function os2web_esdh_provider_page() {
  if (os2web_esdh_provider_has_api('mm')) {
    $data = os2web_esdh_provider_invoke('mm', 'get_import_list');
    $imports = array();
    foreach ($data as $meeting) {
      $imports = array_merge($imports, os2web_esdh_provider_invoke('mm', 'import_meeting', $meeting));
    }
    return '<pre>' . print_r($imports, 1);
  }
  return '<pre>BLABLA' . print_r($plugins, 1) . '</pre><pre>';
}

/**
 * Descripes the plugins needed for the api's
 *
 * @return array
 */
function os2web_esdh_provider_ctools_plugin_type() {
  $plugins['cm'] = array(
      'cache' => TRUE,
      'required methods' => array(
          'get_document',
          'get_document_file',
          'get_case_docs',
          'get_case_data',
          'lookup_doc',
          'lookup_case',
      )
  );
  $plugins['mm'] = array(
      'cache' => TRUE,
      'required methods' => array(
          'get_import_list',
          'import_meeting'
      ),
      'optional methods' => array(
          'post_import_process',
      )
  );
  $plugins['rp'] = array();
  return $plugins;
}

/**
 * Import form
 */
function os2web_esdh_provider_import_form() {
  $form = array();
  $form['run_import'] = array(
      '#type' => 'submit',
      '#value' => t('Run import'),
  );
  $form['group'] = array(
      '#type' => 'fieldset',
      '#title' => t('Extended options.'),
  );
  $form['group']['force'] = array(
      '#type' => 'checkbox',
      '#title' => t('Force recreation of nodes'),
      '#default_value' => true,
      '#description' => t('WARNING: This will destroy existing nodes and replace with freshly imported. All node-id\s will change'),
  );
  $form['group']['focus'] = array(
      '#type' => 'textfield',
      '#title' => t('Focused import id'),
      '#description' => t('Ie. 1577 to reimport XML_1577.xml.'),
  );
  return $form;
}

function os2web_esdh_provider_import_form_submit(&$form_state, $form) {
  if (!os2web_esdh_provider_has_api('mm')) {
    drupal_set_message(t('ERROR: No valid MM importer plugin active!'), 'error');
    return;
  }
  $force = $form['values']['force'] == 1;
  $focus = (int) $form['values']['focus'];

  $batch = array(
      'title' => 'Dagsorden import',
      'operations' => array(),
  );
  $meetings = os2web_esdh_provider_invoke('mm', 'get_import_list');
  foreach ($meetings as $meeting) {
    if ($focus === 0 || $focus === $meeting['id'])
      $batch['operations'][] = array('_os2web_esdh_provider_import_meeting', array($meeting, $force));
  }
  if (os2web_esdh_provider_supports('mm', 'post_import_process')) {
    $batch['operations'][] = array('os2web_esdh_provider_invoke', array('mm', 'post_import_process'));
  }
  batch_set($batch);
//  _os2web_esdh_provider_import_meeting(array_pop($meetings), $force);
}

/**
 * Imports meeting metadata into a node
 * @param any $meeting_id
 * @return int node-id
 */
function _os2web_esdh_provider_import_meeting($meeting_id, $force = FALSE, &$context) {
  if (!lock_acquire(__FUNCTION__ . $meeting_id['id'])) {
    return;
  }
  $meetings = os2web_esdh_provider_invoke('mm', 'import_meeting', $meeting_id);
  $nids = array();
  foreach ($meetings as $meeting) {

    // Run check to see if meeting is already imported
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'meeting')
        ->fieldCondition('field_system_id', 'value', $meeting['system_id'], '=')
        ->execute();
    if (isset($result['node'])) {
      $nid = array_shift($result['node'])->nid;
      if ($force) {
        error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . ' - Removing nid: ' . $nid);
        node_delete($nid);
        watchdog('ESDH', 'Removed %nid prior to import.', array('%nid' => $nid), WATCHDOG_DEBUG);
        $node = new stdClass(); // We create a new node object
      } else {
        watchdog('ESDH', 'Meeting already imported in %nid. Skiping.', array('%nid' => $nid), WATCHDOG_DEBUG);
        continue;
      }
    } else {
      $node = new stdClass(); // We create a new node object
    }

    $node->type = "meeting"; // Or any other content type you want
    $node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
    $node->uid = 1; // Or any id you wish
    node_object_prepare($node); // Set some default values.
    // Set field values:
    $node->title = $meeting['title'];
    $node->field_meeting_abbr[LANGUAGE_NONE][0]['value'] = substr($meeting['description'], 0, 49);
    $node->field_meeting_abbr[LANGUAGE_NONE][0]['format'] = 'filtered_html'; // If field has a format, you need to define it. Here we define a default filtered_html format for a body field
    // The date
    $node->field_date[LANGUAGE_NONE][0]['value'] = $meeting['meeting_date_start'];
    $node->field_date[LANGUAGE_NONE][0]['value2'] = $meeting['meeting_date_finish'];
    $node->field_date[LANGUAGE_NONE][0]['timezone'] = 'Europe/Berlin';
    $node->field_date[LANGUAGE_NONE][0]['date_type'] = 'datetime';
    // Proper id tagging
    $node->field_meeting_id[LANGUAGE_NONE][0]['value'] = $meeting['meeting_id'];
    $node->field_system_id[LANGUAGE_NONE][0]['value'] = $meeting['system_id'];
    // Type import
    $node->field_meeting_type[LANGUAGE_NONE][0]['value'] = $meeting['type'];

    // Make sure the committee term is created and get the term.
    $node->field_committee[LANGUAGE_NONE][0]['tid'] = _acadre_esdh_import_term($meeting['committee'], 'committee')->tid;
    $node->field_location[LANGUAGE_NONE][0]['tid'] = _acadre_esdh_import_term($meeting['location'], 'lokation')->tid;
    // Add QBrick info @FIXME This should be in a node_save hook in qbrick module.
    if (function_exists('_os2web_qbrick_get_movie_id')) {
      $movie_id = _os2web_qbrick_get_movie_id($node);
      if ($movie_id != FALSE) {
        $meeting['movie_id'] = $movie_id;
        $meeting['movie_chapters'] = _os2web_qbrick_get_chapters($movie_id);
        $node->field_qbrick_ref[LANGUAGE_NONE][0]['id'] = $movie_id;
        $node->field_qbrick_ref[LANGUAGE_NONE][0]['seek'] = 0;
      } else {
        $node->field_qbrick_ref = array();
      }
    }
    // Add full document
    if (FALSE !== ($file = _os2web_esdh_provider_import_file($meeting['full_doc'])))
      $node->field_full_doc[LANGUAGE_NONE][] = (array) $file;
    // Import items
    if (is_array($meeting['items'])) {
      $item_nids = _os2web_esdh_provider_import_items($meeting['items']);
      foreach ($item_nids as $nid) {
        $node->field_ref_bullet_points[LANGUAGE_NONE][]['target_id'] = $nid;
      }
    }

    // Save the meeting node.
    node_submit($node);
    $node->created = $meeting['creation_date'];
    node_save($node);
    error_log("MARK - Created: \$node->nid = " . print_r($node->nid, 1));
    watchdog('ESDH', 'Imported agenda id: %aid (Meeting: %mid) into node %nid .', array('%aid' => $meeting['system_id'], '%mid' => $meeting['meeting_id'], '%nid' => $node->nid), WATCHDOG_DEBUG);
    $nids[] = $node->nid;
  }
  $context['message'] = 'Imported meeting id: ' . $meeting['meeting_id'] . ' - ' . $node->title . ' - ' . $meeting_id['uri'];
  return $nids;
}

/**
 * Imports item metadata into nodes
 * @param array $items
 * @return array of nids
 */
function _os2web_esdh_provider_import_items($items) {
  $nids = array();
  foreach ($items as $item) {
    $node = new stdClass();
    $node->type = "bullet_point"; // Or any other content type you want
    $node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
    $node->uid = 1; // Or any id you wish
    $node->title = $item['title'];
    node_object_prepare($node); // Set some default values.
    if ($item['access'] === 'Lukket') {
      $node->field_bul_point_closed[LANGUAGE_NONE][]['value'] = 0;
      node_submit($node);
      node_save($node);
      $nids[] = $node->nid;
    } else {
      $node->field_bul_point_closed[LANGUAGE_NONE][]['value'] = 1;
      if (isset($meeting['movie_id']) && is_numeric($meeting['movie_chapters'][$meeting[$id]])) {
        $node->field_qbrick_ref[LANGUAGE_NONE][0]['id'] = $meeting['movie_id'];
        $node->field_qbrick_ref[LANGUAGE_NONE][0]['seek'] = $meeting['movie_chapters'][$meeting[$id]];
      }
      // Gather the bullets for the item
      if (isset($item['bullets']) && is_array($item['bullets'])) {
        $bullet_nids = _os2web_esdh_provider_import_bullets($item['bullets']);
        foreach ($bullet_nids as $nid) {
          $node->field_ref_attachment[LANGUAGE_NONE][]['target_id'] = $nid;
        }
      } else {
        $node->field_ref_attachment[LANGUAGE_NONE] = array();
      }
      // Gather enclosures
      foreach ($item['enclosures'] as $enclosure) {
        if ($file = _os2web_esdh_provider_import_file($enclosure)) {
          $node->field_enclosures[LANGUAGE_NONE][] = (array) $file;
        } else {
          watchdog('ESDH', 'There was an error importing file %uri ', array('%uri' => $enclosure['uri']), WATCHDOG_ERROR);
        }
      }
      node_submit($node);
      node_save($node);
      $nids[] = $node->nid;
    } // If
  } // Foreach
  return $nids;
}

/**
 * Imports bullet metadata into nodes
 * @param array $bullets
 * @return array of nids
 */
function _os2web_esdh_provider_import_bullets($bullets) {
  $nids = array();
  foreach ($bullets as $bullet) {
    $node = new stdClass();
    $node->type = "bullet_point_attachment"; // Or any other content type you want
    $node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
    $node->uid = 1; // Or any id you wish
    $node->title = $bullet['title'];
    node_object_prepare($node); // Set some default values.
    // Let's add standard body field
    $node->field_bpa_body[$node->language][0]['value'] = $bullet['body'];
    $node->field_bpa_body[$node->language][0]['format'] = 'filtered_html'; // If field has a format, you need to define it. Here we define a default filtered_html format for a body field
    node_submit($node);
    node_save($node);
    $nids[] = $node->nid;
  }
  return $nids;
}

/**
 * Imports a file metadata into a managed drupal file
 * @param array $file_meta
 * @return object 
 */
function _os2web_esdh_provider_import_file($file_meta) {
  $uri_in = $file_meta['uri'];

  $pinfo = pathinfo($uri_in);
  if ($file_meta['title'] !== '') {
    $fname = $file_meta['title'];
  } else {
    $fname = $pinfo['filename'];
  }

  $uri_out = $pinfo['dirname'] . '/' . _os2web_meetings_sanetize_filename($fname . '.' . strtolower($pinfo['extension']));
  $uri_pdf = $pinfo['dirname'] . '/' . _os2web_meetings_sanetize_filename($fname . '.pdf');

  $uri = FALSE;
  if ($uri_tmp = _os2web_meetings_similar_file_exists(drupal_realpath($uri_pdf))) {
    // we have an already converted pdf file
    $uri = $uri_pdf;
    $convert = false;
  } elseif ($uri_tmp = _os2web_meetings_similar_file_exists(drupal_realpath($uri_out))) {
    $uri_out = implode('/', array(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), $folder, basename($uri_tmp)));
    // File already copied
    $convert = true;
    $uri = $uri_out;
  } else {
    // Completely unprocessed file
    $uri_old = $uri_in;
    $uri_in = _os2web_meetings_similar_file_exists(drupal_realpath($uri_in));
    if ($uri_in === false || FALSE === file_unmanaged_copy($uri_in, $uri_out, FILE_EXISTS_REPLACE)) {
      // Bummed out on copy
      watchdog('os2web_meetings', 'File copy failed for %infile -> %outfile. Check folder permissions.', array('%infile' => $uri_old, '%outfile' => $uri_out), WATCHDOG_WARNING);
      return false;
    } else {
      $convert = true;
      $uri = $uri_out;
    }
  }

  if (false === $uri) {
    watchdog('os2web_meetings', 'Processing of %infile failed. If exists, check permissions.', array('%infile', $uri_in), WATCHDOG_WARNING);
    return false;
  }

  if (file_uri_scheme($uri) != 'public') {
    watchdog('os2web_meetings', 'Invalid scheme for uri %uri, Possibly absolut path ?', array('%uri', $uri), WATCHDOG_ERROR);
    error_log("Var: \$uri = " . print_r($uri, 1));
    error_log("Var: \$uri_in = " . print_r($uri_in, 1));
    error_log("Var: \$uri_out = " . print_r($uri_out, 1));
    error_log("Var: \$uri_pdf = " . print_r($uri_pdf, 1));
  }

  $fid = db_select('file_managed', 'fm')
          ->fields('fm', array('fid'))
          ->condition('uri', $uri)
          ->execute()->fetchField();

  $file = new stdClass();
  if ($fid) {
    $file->fid = $fid;
  }
  $file->uri = $uri;
  $file->display = 1;
  $file->field_titel[LANGUAGE_NONE][]['value'] = $file_meta['title'];
  $file->filename = drupal_basename($file->uri);
  $file->filemime = file_get_mimetype($file->uri);
  $file->uid = 1;
  $file->status = FILE_STATUS_PERMANENT;
  $file = file_save($file);

  // Schedule for PDF conversion
  $convert = false; // DEBUG
  if ($convert) {
    drupal_load('module', 'os2web_adlib_api');
    os2web_adlib_api_convert_to_pdf($file->fid, $file->filename);
    watchdog('os2web_meetings', 'File , %filename (fid: %fid) queued for PDF conversion.', array('%filename' => $file->filename, '%fid' => $file->fid), WATCHDOG_INFO);
  }

//  watchdog('os2web_meetings', 'Imported file %filename (fid: %fid).', array('%filename' => $file->filename, '%fid' => $file->fid), WATCHDOG_DEBUG);
  return $file;
}

/**
 * Imports a termname into a vacabulary. Does dupe check
 * @param string $term_name
 * @param string $vocab
 * @return object 
 */
function _acadre_esdh_import_term($term_name, $vocab) {
  //TODO: Process members of the committee.
  //FIXME: MAke vocab name configurable.
  $vid = db_select('taxonomy_vocabulary', 'tv')
      ->fields('tv', array('vid'))
      ->condition('machine_name', $vocab)
      ->execute()
      ->fetchField();

  $term = new stdClass();
  $term->vid = $vid;
  $term->name = $term_name;

  $tid = db_select('taxonomy_term_data', 'td')
          ->fields('td', array('tid'))
          ->condition('name', $term->name)
          ->condition('vid', $term->vid)
          ->execute()->fetchObject();

  if (isset($tid->tid) && $tid->tid > 0) {
    $term->tid = (int) $tid->tid;
  }
  taxonomy_term_save($term);

  return $term;
}

/**
 * Show tab only on meeting pages, and if user has access
 * @param int $nid
 * @return boolean
 */
function _os2web_esdh_provider_node_tab_access($nid) {
  $node = node_load($nid);
  if ($node->type != 'meeting')
    return false;
  return user_access('administer os2web');
}
function _os2web_esdh_provider_node_tab_page($nid, $op = FALSE) {
  $html = "";
  $node = node_load($nid);
  $meeting_id = $node->field_meeting_id[LANGUAGE_NONE][0]['value'];
  $system_id = $node->field_system_id[LANGUAGE_NONE][0]['value'];
  $filename = 'Unknown';
  $files = file_scan_directory(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), '/\.xml$/i', array('recurse' => false));
  foreach ($files as $file) {
    $xml = simplexml_load_file(drupal_realpath($file->uri));
    if (is_object($xml)) {
      $xml_mid = (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field/@sysid"));
      if ($meeting_id == $xml_mid) {
        $filename = $file->filename;
        $agenda = $xml->xpath("//table[@name='producedAgenda']/fields/field[@sysid='$system_id']/../field");
        if (!empty($agenda))
          break;
      }
    }
  }

  if ($op) {
    switch ($op) {
      case 'reimport':
        _os2web_meetings_process_manifest($file->uri, $system_id);
        os2web_meetings_order_addenums();
        break;
      default:
        drupal_set_message($op . ' not yet implemented.', 'error');
        break;
    }
    drupal_goto('node/' . $nid . '/control');
  }

  $html .= "<h1>" . $node->title . "</h1>";

  $head = array('Node id', 'Meeting id', 'System id', 'Filename');
  $rows[] = array(
      $node->nid,
      $meeting_id,
      $system_id,
      $filename,
  );
  $html .= theme('table', array('header' => $head, 'rows' => $rows));
  $head = array('Attribute', 'Value');
  $rows = array();
  foreach ($agenda as $attr) {
    foreach ($attr->attributes() as $key => $val) {
      $rows[] = array($key, $val);
    }
  }
  $html .= theme('table', array('header' => $head, 'rows' => $rows));

  $html .= l('Re-import', 'node/' . $node->nid . '/control/reimport');

  return $html;
}

function os2web_esdh_provider_node_delete($node) {
  if ($node->type === 'meeting') {
    db_delete('os2web_meetings_imported')->condition('nid', $node->nid)->execute();
    //TODO: Delete bullets from meeting.
    $items = array_shift($node->field_ref_bullet_points);
    if (is_array($items))
      foreach ($items as $nids) {
        node_delete($nids['target_id']);
      }
  }
  if ($node->type === 'bullet_point') {
    //TODO: Delete bullet attachments from meeting.
    $bullets = array_shift($node->field_ref_attachment);
    if (is_array($bullets))
      foreach ($bullets as $nids) {
        node_delete($nids['target_id']);
      }
  }
}

/**
 * Validate an API implementation for use. This function validates all required methods are available, and that only 1 implementation exists.
 *
 * @param string $api
 * @return boolean
 */
function os2web_esdh_provider_has_api($api) {
  $info = ctools_plugin_get_info('os2web_esdh_provider', $api);
  if ($info) {
    $plugins = ctools_get_plugins('os2web_esdh_provider', $api);
    if (count($plugins) > 1) {
      watchdog('esdh provider', 'API %api has multiple implementations active.', array('%api' => $api), WATCHDOG_ERROR);
      return false;
    }
    if (isset($info['required methods'])) {
      foreach ($info['required methods'] as $method) {
        if (!os2web_esdh_provider_supports($api, $method)) {
          watchdog('esdh provider', 'Incomplete API found during check: %api', array('%api' => $api), WATCHDOG_ERROR);
          return false;
        }
      }
    }
  } else {
    watchdog('esdh provider', 'Unimplemented API requested: %api', array('%api' => $api), WATCHDOG_ERROR);
    return false;
  }

  return true;
}

/**
 * Check if the api supports a given method.
 *
 * @param string $api
 * @param string $method
 * @return bool - true if method is available
 */
function os2web_esdh_provider_supports($api, $method) {
  ctools_include('plugins');
  if ($plugin = array_shift(ctools_get_plugins('os2web_esdh_provider', $api))) {
    return function_exists(ctools_plugin_get_function($plugin, $method));
  } else {
    return false;
  }
}

/**
 * Invokes a method from an api
 *
 * @param string $api
 * @param string $method
 * @param any $args... additional arguments passed to the method
 * @return fowarded return value from method
 */
function os2web_esdh_provider_invoke() {
  $args = func_get_args();
  $api = array_shift($args);
  $method = array_shift($args);
  ctools_include('plugins');
  $plugin = array_shift(ctools_get_plugins('os2web_esdh_provider', $api));
  if ($plugin) {
    $function = ctools_plugin_get_function($plugin, $method);
    if ($function) {
      return call_user_func_array($function, $args);
    }
    watchdog('esdh_provider', 'Incomplete api implementation: method %method in api: %api called, but does not exists.', array(
        '%method' => $method,
        '%api' => $api,
        ), WATCHDOG_ERROR);
  }
}

/* * *************** API METHODS BELOW HERE ************************************ */

/**
 * builds an array with required content for a case structure
 */
function os2web_esdh_provider_default_case() {
  return array(
      'id' => NULL, // Int - CaseId
      'access_code' => NULL, // String
      'restricted_from_public' => NULL, // Int
  );
}

/**
 * builds an array with required content for a document structure
 */
function os2web_esdh_provider_default_document() {
  return array(
      'id' => NULL, // Int - DocId
      'case_reference' => NULL, // Int - CaseId
      'title' => NULL, // String
      'last_update' => NULL, // String
      'access_code' => NULL, // String
      'publication_indicator' => NULL, // Int
      'lock_status' => NULL, // Bool
  );
}

/**
 * builds an array with required content for a meeting structure
 */
function os2web_esdh_provider_default_meeting() {
  return array(
      'title' => NULL, // String
      'meeting_id' => NULL, // Int
      'system_id' => NULL, // Int
      'publication_id' => NULL, // Int - optional
      'creation_date' => NULL, // Date
      'description' => NULL, // String
      'meeting_date_start' => NULL, // Datetime
      'meeting_date_finish' => NULL, // Datetime
      'type' => NULL, // String
      'committee' => NULL, // String
      'location' => NULL, // String
      'full_doc' => NULL, // File
      'items' => NULL, // item_struct
  );
}

/**
 * builds an array with required content for a meeting-item structure
 */
function os2web_esdh_provider_default_item() {
  return array(
      'id' => NULL, // Int
      'title' => NULL, // String
      'access' => NULL, // String
      'enclosures' => NULL, // File[]
      'bullets' => NULL, // bullet_struct
  );
}

/**
 * builds an array with required content for a meeting-bullet structure
 */
function os2web_esdh_provider_default_bullet() {
  return array(
      'title' => NULL, // String
      'body' => NULL, // string
  );
}

