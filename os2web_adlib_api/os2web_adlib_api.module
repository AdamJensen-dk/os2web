<?php

define('ADLIB_TEST_FID', FALSE);

/*
 *
 * @author Jesper Mathiassen <jm@bellcom.dk>
 * @copyright Bellcom Open Source aps.
 */

/**
 * Implementation of hook_menu()
 *
 */
function os2web_adlib_api_menu() {
  $items['admin/config/os2web/adlibstatus'] = array(
      'title' => t('AdLib Status'),
      'description' => t('Provides an overview of known AdLib jobs.'),
      'access callback' => TRUE,
      'page callback' => 'os2web_adlib_api_status',
      'type' => MENU_LOCAL_TASK,
  );
  $items['os2web/adlib/ajax/status/%'] = array(
      'page callback' => 'os2web_adlib_api_status_ajax',
      'page arguments' => array(4),
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
  );
  $items['os2web/adlib/test'] = array(
      'title' => t('AdLib test page'),
//    'description' => t('Your description goes here.'),
      'access callback' => TRUE,
      'page callback' => 'os2web_adlib_api_page',
      'type' => MENU_CALLBACK,
  );
  return $items;
}

function os2web_adlib_api_status_ajax($fid) {
  $file = db_select('os2web_adlib_api_doc_files', 'df')
      ->fields('df')
      ->condition('fid', $fid)
      ->execute()
      ->fetchObject();
  if (is_object($file)) {
    if ($file->job_id != '') {
      $adlib = _os2web_adlib_api_get_instance();
      $status = $adlib->getJobStatus($file->job_id);
      drupal_json_output($status->status);
    } else {
      drupal_json_output('Not queued.');
    }
  } else {
    drupal_json_output('Not found.');
  }
}

/**
 * Provides an overview of known AdLib jobs.
 * 
 * @access public
 * @return void
 */
function os2web_adlib_api_status() {
  if (isset($_GET['delete'])) {
    $query = db_delete('os2web_adlib_api_doc_files');
    if (is_numeric($_GET['delete'])) {
      $query = $query->condition('fid', $_GET['delete']);
    }
    $query->execute();
    drupal_goto('admin/config/os2web/adlibstatus');
  }
  if (isset($_GET['reset'])) {
    $query = db_delete('os2web_adlib_api_doc_files');
    $query = $query->condition('fid', $_GET['reset']);
    $query->execute();
    os2web_adlib_api_convert_to_pdf($_GET['reset']);
    drupal_goto('admin/config/os2web/adlibstatus');
  }
  if (isset($_GET['process'])) {
    _os2web_adlib_api_process_pdf();
    drupal_goto('admin/config/os2web/adlibstatus');
  }
  $adlib = _os2web_adlib_api_get_instance();
  $head = array('Connector Name', 'status', 'Jobs');
  $statuslist = $adlib->getConnectorStatusList();
  $rows = array();
  foreach ($statuslist as $status) {
    $rows[] = array(
        $status->ServerDetail['ServerName'],
        ($status->ServerDetail['Enabled'] == 'True' ? 'E' : 'Not e') . 'nabled - ' . $status->ServerInfo['Status'],
        $status->ServerInfo['JobCount'],
    );
  }
  drupal_add_js(drupal_get_path('module', 'os2web_adlib_api') . '/os2web_adlib_api.js', 'file');
  $html = '<h2>Connector information</h2>';
  $html .= theme('table', array('header' => $head, 'rows' => $rows));
  $head = array('Fid', 'Job-id', 'Status', 'action');
  $rows = array();
  $files = db_query("SELECT * FROM {os2web_adlib_api_doc_files} WHERE job_id NOT LIKE 'Complete'");
  foreach ($files as $file) {
    $fdata = file_load($file->fid);
    $rows[] = array(
        l($fdata->uri, file_create_url($fdata->uri)),
        $file->job_id,
        array('data' => 'Looking up..', 'class' => 'status', 'id' => $file->fid),
        l('delete', 'admin/config/os2web/adlibstatus', array('query' => array('delete' => $file->fid))) . ' ' . l('reset', 'admin/config/os2web/adlibstatus', array('query' => array('reset' => $file->fid))),
    );
  }
  $html .= '<h2>Active jobs</h2>';
  $html .= theme('table', array('header' => $head, 'rows' => $rows));
  $html .= l('Delete all', 'admin/config/os2web/adlibstatus', array('query' => array('delete' => 'all')));
  $html .= ' - ' . l('Run processing', 'admin/config/os2web/adlibstatus', array('query' => array('process' => true)));
  return $html;
}

/**
 * Test page for abitrary test usage
 * 
 * @access public
 * @return void
 */
function os2web_adlib_api_page() {
  error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '()');
  $fid = 225735;
//  db_delete('os2web_adlib_api_doc_files')->condition('fid', $fid)->execute();
//  os2web_adlib_api_convert_to_pdf($fid);
//  $nid = 74558;
//   os2web_adlib_api_convert_to_html($fid,$nid);
//  _os2web_adlib_api_process_pdf();
//  sleep(5);
//  _os2web_adlib_api_process_pdf();
//  $file = db_select('os2web_adlib_api_doc_files', 'df')->fields('df')->condition('fid', $fid)->execute()->fetchObject();
//  $adlib = _os2web_adlib_api_get_instance();
//  $call = array();
//  $call[] = explode('\\',$adlib->addJobFolder());
//  $call[] = $adlib->deleteJobFolder($call[0][1]);
//  $call = $adlib->getJobStatus($file->job_id);
  // $call= file_load(ADLIB_TEST_FID);
// $call = node_load($nid,NULL,TRUE);

  $files = db_select('file_managed','fm')->fields('fm')->condition('filemime','application/msword')->execute();
  $rows=array();
  foreach ($files as $file) {
    if (file_exists(drupal_realpath($file->uri))) {
      $rows[]= array(l($file->fid, 'admin/config/os2web/adlibstatus', array('query' => array('reset' => $file->fid))) ,$file->filename);
    }
  }
  return theme('table',array('rows'=>$rows));

//  return '<textarea cols=100 rows=50>' . print_r($call, 1) . '</textarea>';
}

/**
 * Implementation of hook_cron()
 */
function os2web_adlib_api_cron() {
  _os2web_adlib_api_process_pdf(100);
}

/**
 * Implementation of hook_init()
 */
function os2web_adlib_api_init() {
  // _os2web_adlib_api_process_pdf(1);
}

/**
 * Converts a fid to html and injects into nid body field
 * 
 * @param int $fid 
 * @param int $nid 
 * @access public
 * @return void
 */
function os2web_adlib_api_convert_to_html($fid, $nid) {
  if (0 === db_query('SELECT fid from {os2web_adlib_api_doc_files} where fid = :fid AND jobtype = :jobtype', array(':fid' => $fid, ':jobtype' => 1))->rowCount()) {
    $record = array(
        'fid' => $fid,
        'did' => $nid,
        'jobtype' => 1,
    );
    drupal_write_record('os2web_adlib_api_doc_files', $record);
    if (ADLIB_TEST_FID) {
      error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File queued for processing.");
    }
    return TRUE;
  } else {
    //      error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File already in queue, aborting.");
    return FALSE;
  }
}

/**
 * Main call to queue file for converting.
 *
 * @param int $fid - fid of a managed file
 * @param int $docref - arbitrary identifier for later reference (ie. Doc id)
 * @return boolean
 */
function os2web_adlib_api_convert_to_pdf($fid, $docref = NULL) {
  $file = file_load($fid);
  if (!file_exists(drupal_realpath($file->uri))) {
    watchdog('adlib_api', 'Cannot queue file %file. File does not exist.', array('%file' => $file->filename), WATCHDOG_WARNING);
    db_delete('os2web_adlib_api_doc_files')->condition('fid', $fid);
    return false;
  }
  if (!_os2web_adlib_api_is_file_pdf($fid)) {
    if (0 === db_query('SELECT fid from {os2web_adlib_api_doc_files} where fid = :fid AND jobtype = :jobtype', array(':fid' => $fid, ':jobtype' => 0))->rowCount()) {
      $record = array(
          'fid' => $fid,
          'did' => $docref,
          'jobtype' => 0,
      );
      drupal_write_record('os2web_adlib_api_doc_files', $record);
      if (ADLIB_TEST_FID) {
        error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File queued for processing.");
      }
      return TRUE;
    } else {
//      error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File already in queue, aborting.");
      return FALSE;
    }
  } else {
//    error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File already PDF.");
    $record = array(
        'fid' => $fid,
        'did' => $docref,
        'job_id' => 'Complete',
    );
    drupal_write_record('os2web_adlib_api_doc_files', $record);
    return FALSE;
  }
}

/**
 * Return the fid of a file saved with a reference
 *
 * @param int $ref Reference for the file
 * @return int
 */
function os2web_adlib_api_get_fid($ref) {
  return (int) db_query('SELECT fid FROM {os2web_adlib_api_doc_files} WHERE did=:did', array(':did' => $ref))->fetchField();
}

/**
 * Factory for class instances. This allows easy changing between api classes.
 * TODO: Make this proper plugin-able.
 *
 * @return AdLibWS object
 */
function _os2web_adlib_api_get_instance() {
  $obj = &drupal_static(__FUNCTION__);
  if (is_object($obj))
    return $obj;
  module_load_include('inc', 'os2web_adlib_api', 'AdLibWS.class');
  return $obj = new AdLibWS();
}

/**
 * _os2web_adlib_api_process_pdf 
 * 
 * @param mixed $limit 
 * @access protected
 * @return void
 */
function _os2web_adlib_api_process_pdf($limit = FALSE) {
  error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '()');
// Locate any finished jobs
  $files = db_select('os2web_adlib_api_doc_files', 'f')
      ->fields('f')
      ->isNotNull('job_id')
      ->condition('job_id', array('Complete'), 'NOT IN');
  if (ADLIB_TEST_FID) {
    $files = $files->condition('fid', ADLIB_TEST_FID);
  }
  if ($limit !== FALSE) {
    $files->range(0, $limit);
  }
  $files = $files->execute();
  if (count($files) > 0) {
    $adlib = _os2web_adlib_api_get_instance();

    foreach ($files as $file) {
      $jobinfo = $adlib->getJobStatus($file->job_id);
      if (in_array($jobinfo->status, array('Not found', 'Failed'))) {
        $jobfileinfo = unserialize($file->job_info);
        $adlib->deleteJob($file->job_id);
        $folder = explode('\\', $jobfileinfo['basefolder']);
        $adlib->deleteJobFolder($folder[1]);


        $fdata = file_load($file->fid);
        if (!file_exists(drupal_realpath($fdata->uri)) || file_uri_scheme($fdata->uri)=='' || $fdata->filemime=='application/pdf' ) {
          watchdog('adlib_api', 'Cannot re-queue file %file. File does not exist or is invalid.', array('%file' => $fdata->filename), WATCHDOG_WARNING);
          db_delete('os2web_adlib_api_doc_files')->condition('fid', $file->fid)->execute();
        } else {
          $record = array(
              'fid' => $file->fid,
              'jobtype' => $file->jobtype,
              'job_id' => null,
              'job_info' => null,
          );
          drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid', 'jobtype'));
          error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: Job failed and reset: " . $file->fid);
          watchdog('adlib_api', 'Found a failed job for %file. Resetting.', array('%file' => $fdata->filename), WATCHDOG_WARNING);
        }
      } elseif (in_array($jobinfo->status, array('Complete'))) {
        $record = array(
            'fid' => $file->fid,
            'jobtype' => $file->jobtype,
            'job_id' => 'Complete',
        );
        $jobfileinfo = unserialize($file->job_info);

        error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: Job complete. Fetching file");
        watchdog('adlib_api', 'A PDF has been generated successfully for file: %file ',array('%file' => $jobfileinfo['out_filename']));
        $file_url = $jobfileinfo['out_url'] . rawurlencode($jobfileinfo['out_filename']);
        $download = curl_init($file_url);
        if (variable_get('os2web_pws_proxy')) {
          curl_setopt($download, CURLOPT_PROXY, variable_get('os2web_pws_proxy_host'));
          curl_setopt($download, CURLOPT_PROXYPORT, variable_get('os2web_pws_proxy_port'));
          curl_setopt($download, CURLOPT_HTTPPROXYTUNNEL, TRUE);
        }
        curl_setopt($download, CURLOPT_RETURNTRANSFER, TRUE);
        $data = curl_exec($download);

        $info = curl_getinfo($download);
        if ($info['http_code'] === 200 && $info['size_download'] > 4) {
          switch ($file->jobtype) {
            case 0: // PDF
              $upd_file = file_load($file->fid);
              error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File recieved successfully, Saving.");
              $uri = file_unmanaged_save_data($data, dirname($upd_file->uri) . '/' . $jobfileinfo['out_filename'], FILE_EXISTS_REPLACE);
              if (filesize(drupal_realpath($uri)) > 0) {
                //            file_unmanaged_delete($upd_file->uri);
                db_delete('file_managed')->condition('uri', $uri);
                $upd_file->uri = $uri;
                $upd_file->filename = basename($uri);
                $upd_file->filemime = file_get_mimetype($upd_file->uri);
                $upd_file->filesize = filesize(drupal_realpath($upd_file->uri));
                $upd_file->timestamp = time();
                drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid', 'jobtype'));
                drupal_write_record('file_managed', $upd_file, array('fid'));
                $adlib->deleteJob($file->job_id);
                $folder = explode('\\', $jobfileinfo['basefolder']);
                $adlib->deleteJobFolder($folder[1]);
                error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File saved, file record updated.");
              } else {
                error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: Filesize was 0. Aborting update.");
              }
              break;
            case 1: // HTML 
              $nid = $file->did;
              if ($node = node_load($nid)) {
                $node->field_bpa_body[LANGUAGE_NONE][0]['value'] = $data;
                $node->field_bpa_body[LANGUAGE_NONE][0]['format'] = 'full_html';
                $node->feeds = array();
                node_save($node);
                $adlib->deleteJob($file->job_id);
                $folder = explode('\\', $jobfileinfo['basefolder']);
                $adlib->deleteJobFolder($folder[1]);
                drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid', 'jobtype'));
                error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '() - File converted, node updated.');
              }
              break;
            default:
              error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '() - Unknown jobtype');
          }
        } elseif ($info['http_code'] === 404) { // File not found ??
          $record = array(
              'fid' => $file->fid,
              'jobtype' => $file->jobtype,
              'job_id' => null,
              'job_info' => null,
              );
          drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid', 'jobtype'));
          watchdog('adlib_api','Completed file (fid: %fid)could not be found on the server. Job reset.',array('%fid' => $file->fid),WATCHDOG_WARNING);
          error_log('Completed file (fid: '.$file->fid.') could not be found on the server. Job reset.');
        }
      }
    }
  }

// Start new job if needed
  $files = db_select('os2web_adlib_api_doc_files', 'f')->fields('f')->isNull('job_id');
  if (ADLIB_TEST_FID) {
    $files = $files->condition('fid', ADLIB_TEST_FID);
  }
  if ($limit !== FALSE) {
    $files->range(0, $limit);
  }
  $files = $files->execute();

  if ($files->rowCount() > 0) {
    $adlib = _os2web_adlib_api_get_instance();

    while ($file = $files->fetchObject()) {
      $file->file = file_load($file->fid);
      $filename = drupal_realpath($file->file->uri);

      if (is_file(drupal_realpath($file->file->uri))) {
        $upload = $adlib->uploadData($file->file->filename, file_get_contents(drupal_realpath($file->file->uri)));
        if ($upload) {
          $job = $adlib->addJob($upload, $file->jobtype);
          if ($job !== FALSE) {
            $jobinfo = array(
                'fid' => $file->fid,
                'jobtype' => $file->jobtype,
                'job_id' => (string) $job->JobSettings['JobID'],
                'job_info' => $upload,
            );
            drupal_write_record('os2web_adlib_api_doc_files', $jobinfo, array('fid', 'jobtype'));
            watchdog('adlib_api', 'Queued file %file for PDF.', array('%file' => $file->file->filename));
          } else {
            watchdog('adlib_api', 'Upload of %file failed. Check permissions.', array('%file' => $file->file->filename));
            db_delete('os2web_adlib_api_doc_files')->condition('fid', $file->file->fid)->execute();
          }
        } else {
        //FIXME: Insert folder cleanup here jm@bellcom.dk
        }
      }
    }
  }
}

/**
 * _os2web_adlib_api_cleanup_files 
 * 
 * @access protected
 * @return void
 */
function _os2web_adlib_api_cleanup_files() {
  $dir = preg_replace('/\/$/', '', DEFAULT_DOC_CACHE_PATH); // Remove trailing /
  $filelist = file_scan_directory($dir, '/.*/');
  foreach ($filelist as $uri => $file) {
    $file = db_select('file_managed', 'f')->fields('f')->condition('uri', $uri)->execute()->fetchAll();
    if (count($file) === 0) {
      // File is not linked in the drupal database
//        file_unmanaged_delete($uri);
//        error_log(basename(__FILE__) . ':' . __LINE__ . ' Deleted: ' . print_r($uri, 1));
    }
  }
}

/**
 * _os2web_adlib_api_is_file_pdf 
 * 
 * @param mixed $fid 
 * @access protected
 * @return void
 */
function _os2web_adlib_api_is_file_pdf($fid) {
  if (is_array($fid)) {
    $result = array();
    $files = file_load_multiple($fid);
    foreach ($files as $file) {
      $result[$file->fid]['is_pdf'] = strcasecmp(pathinfo($file->filename, PATHINFO_EXTENSION), 'pdf') === 0;
      $result[$file->fid]['file'] = $file;
    }
    return $result;
  } else {
    return strcasecmp(pathinfo(file_load($fid)->filename, PATHINFO_EXTENSION), 'pdf') === 0;
  }
}

function os2web_adlib_api_file_delete($file) {
  db_delete('os2web_adlib_api_doc_files')->condition('fid', $file->fid)->execute();
  watchdog('adlib_api','File %file has been cleaned up from adlib conversion table.',array('%file' => $file->uri),WATCHDOG_DEBUG);
}
