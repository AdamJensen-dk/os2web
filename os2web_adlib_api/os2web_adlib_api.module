<?php

/*
 *
 * @author Jesper Mathiassen <jm@bellcom.dk>
 * @copyright Bellcom Open Source aps.
 */

/**
 * Implementation of hook_menu()
 *
 */
function os2web_adlib_api_menu() {
  $items['os2web/adlib/test'] = array(
      'title' => t('AdLib test page'),
//    'description' => t('Your description goes here.'),
      'access callback' => TRUE,
      'access arguments' => true,
      'page arguments' => array(1),
      'page callback' => 'os2web_adlib_api_page',
//    'block callback' => '',
//    'menu_name' => NULL,
//    'tab_parent' => NULL,
//    'tab_root' => NULL,
//    'file' => 'name_of_file.inc',
//    'file path' => drupal_get_path('module', 'os2web_adlib_api'),
//    'weight' => 0,
      'type' => MENU_CALLBACK,
  );
  return $items;
}

function os2web_adlib_api_page($args) {
  $adlib = _os2web_adlib_api_get_instance();
  $call = $adlib->addJobFolder();
  return '<textarea rows=50>' . print_r($call, 1) . '</textarea>';
}

/**
 * Main call to queue file for converting.
 *
 *
 */
function os2web_adlib_api_convert_to_pdf($fid) {

}


/**
 * Factory for class instances. This allows easy changing between api classes.
 * TODO: Make this proper plugin-able.
 *
 * @return AdLibWS object
 */
function _os2web_adlib_api_get_instance() {
  module_load_include('inc', 'os2web_adlib_api', 'AdLibWS.class');
  return new AdLibWS();
}

/**
 * Implementation of hook_init()
 */
function os2web_adlib_api_init() {
//  _os2web_adlib_api_process_pdf(1);
//  _os2web_adlib_api_cleanup_files();
}

function _os2web_adlib_api_process_pdf($limit = FALSE) {
// Locate any finished jobs
  $files = db_select('os2web_adlib_api_doc_files', 'f')
      ->fields('f')
      ->isNotNull('job_id')
      ->condition('job_id', array('Complete'), 'NOT IN');
  if ($limit !== FALSE) {
    $files->range(0, $limit);
  }
  $files = $files->execute();
  if (count($files) > 0) {
    $adlib = _os2web_adlib_get_instance();
    foreach ($files as $file) {
      $jobinfo = $adlib->getJobStatus($file->job_id);
      if (in_array($jobinfo->status, array('Not found', 'Failed'))) {
        $record = array(
            'fid' => $file->fid,
            'job_id' => null,
            'job_info' => null,
        );
        drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid'));
      } else if (in_array($jobinfo->status, array('Complete'))) {
        $record = array(
            'fid' => $file->fid,
            'job_id' => 'Complete',
        );
        $jobfileinfo = unserialize($file->job_info);

        $file_url = $jobfileinfo['out_url'] . rawurlencode($jobfileinfo['out_filename']);
        $download = curl_init($file_url);
        if (variable_get('os2web_adlib_api_proxy')) {
          curl_setopt($download, CURLOPT_PROXY, variable_get('os2web_adlib_api_host'));
          curl_setopt($download, CURLOPT_PROXYPORT, variable_get('os2web_adlib_api_port'));
          curl_setopt($download, CURLOPT_HTTPPROXYTUNNEL, TRUE);
        }
        curl_setopt($download, CURLOPT_RETURNTRANSFER, TRUE);
        $data = curl_exec($download);

        //FIXME: Replace with proper returncode check
        if (!in_array(substr($data, 0, 20), array('<h1>Bad Request</h1>', '<!DOCTYPE HTML PUBLI'))) {

          $uri = file_unmanaged_save_data($data, DEFAULT_DOC_CACHE_PATH . $jobfileinfo['out_filename'], FILE_EXISTS_REPLACE);

          $upd_file = file_load($file->fid);
          $upd_file->uri = $uri;
          $upd_file->filename = basename($uri);
          $upd_file->filemime = file_get_mimetype($upd_file->uri);
          $upd_file->filesize = filesize(drupal_realpath($upd_file->uri));
          $upd_file->timestamp = time();
//          error_log(basename(__FILE__) . ':' . __LINE__ . ' Var: $upd_file = ' . print_r($upd_file, 1));
          drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid'));
          file_save($upd_file);
        }
      }
    }
  }

  function _os2web_adlib_api_cleanup_files() {
    $dir = preg_replace('/\/$/', '', DEFAULT_DOC_CACHE_PATH); // Remove trailing /
    $filelist = file_scan_directory($dir, '/.*/');
    foreach ($filelist as $uri => $file) {
      $file = db_select('file_managed', 'f')->fields('f')->condition('uri', $uri)->execute()->fetchAll();
      if (count($file) === 0) {
        // File is not linked in the drupal database
        file_unmanaged_delete($uri);
//        error_log(basename(__FILE__) . ':' . __LINE__ . ' Deleted: ' . print_r($uri, 1));
      }
    }
  }

// Start new job if needed
  $files = db_select('os2web_adlib_api_doc_files', 'f')->fields('f')->isNull('job_id');
  if ($limit !== FALSE) {
    $files->range(0, $limit);
  }
  $files = $files->execute();
  if (count($files) > 0) {
    $adlib = _os2web_adlib_get_instance();
    $pdfs = _os2web_adlib_api_is_file_pdf($files->fetchAll(PDO::FETCH_COLUMN, 0));

    foreach ($pdfs as $file) {
      if ($file['is_pdf'] === FALSE && is_file(drupal_realpath($file['file']->uri))) {
        $upload = $adlib->uploadData($file['file']->filename, file_get_contents(drupal_realpath($file['file']->uri)));
        $job = $adlib->addJob($upload);
        if ($job !== FALSE) {
          $jobinfo = array(
              'fid' => $file['file']->fid,
              'job_id' => (string) $job->JobSettings['JobID'],
              'job_info' => $upload,
          );
          drupal_write_record('os2web_adlib_api_doc_files', $jobinfo, array('fid'));
        }
      }
    }
  }
}

function _os2web_adlib_api_is_file_pdf($fid) {
  if (is_array($fid)) {
    $result = array();
    $files = file_load_multiple($fid);
    foreach ($files as $file) {
      $result[$file->fid]['is_pdf'] = strcasecmp(pathinfo($file->filename, PATHINFO_EXTENSION), 'pdf') === 0;
      $result[$file->fid]['file'] = $file;
    }
    return $result;
  } else {
    return strcasecmp(pathinfo(file_load($fid)->filename, PATHINFO_EXTENSION), 'pdf') === 0;
  }
}
