<?php

define('ADLIB_TEST_FID', FALSE);
define('ADLIB_HTML_IMG_FOLDER', 'public://bpimg/');

/*
 *
 * @author Jesper Mathiassen <jm@bellcom.dk>
 * @copyright Bellcom Open Source aps.
 */

/**
 * Implementation of hook_menu()
 *
 */
function os2web_adlib_api_menu() {
 // Added fan for requeueing Adlib jobs
 $items['admin/config/os2web/reprocess'] = array(
      'title' => t('AdLib requeue'),
      'description' => t('Requeue AdLib jobs.'),
      'access arguments' => array('administer os2web'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('os2web_adlib_api_reprocess_form'),
      'type' => MENU_LOCAL_TASK,
      'access callback' => TRUE,
  );
 $items['admin/config/os2web/adlibstatus'] = array(
      'title' => t('AdLib Status'),
      'description' => t('Provides an overview of known AdLib jobs.'),
      'access arguments' => array('administer os2web'),
      'page callback' => 'os2web_adlib_api_status',
      'type' => MENU_LOCAL_TASK,
  );
  $items['os2web/adlib/ajax/status/%'] = array(
      'page callback' => 'os2web_adlib_api_status_ajax',
      'page arguments' => array(4),
      'type' => MENU_CALLBACK,
      'access arguments' => array('administer os2web'),
  );
  $items['os2web/adlib/test'] = array(
      'title' => t('AdLib test page'),
//    'description' => t('Your description goes here.'),
      'access arguments' => array('administer os2web'),
      'page callback' => 'os2web_adlib_api_page',
      'type' => MENU_CALLBACK,
  );
  return $items;
}

function os2web_adlib_api_status_ajax($fid) {
  $file = db_select('os2web_adlib_api_doc_files', 'df')
      ->fields('df')
      ->condition('fid', $fid)
      ->execute()
      ->fetchObject();
  if (is_object($file)) {
    if ($file->job_id != '') {
      $adlib = _os2web_adlib_api_get_instance();
      $status = $adlib->getJobStatus($file->job_id);
      drupal_json_output($status->status);
    } else {
      drupal_json_output('Not queued.');
    }
  } else {
    drupal_json_output('Not found.');
  }
}


/**
 * Provides form for user to start reprocessing
 * @author Thomas Thune Hansen <tth@bellcom.dk> 
 *
 * @access public
 * @return array
 */
function os2web_adlib_api_reprocess_form() {
  $form['submit']  = array(
    '#type' => 'submit',
    '#value' => 'Re-konverter importerede dokumenter',
  );

  return $form;
}

/**
 * Starts reprocessing on submit
 * @author Thomas Thune Hansen <tth@bellcom.dk> 
 * 
 * @access public
 */
function os2web_adlib_api_reprocess_form_submit() {
  os2web_adlib_api_reprocess();
}

/**
 * Sets up and starts batchjob
 * @author Thomas Thune Hansen <tth@bellcom.dk> 
 *
 * @access public
 */
function os2web_adlib_api_reprocess() {
  $ids = _os2web_adlib_api_bulletpoint_nid();
  foreach ($ids as $nodeid)
  {
    $operations[] = array('_os2web_adlib_api_reprocess_nid', array($nodeid));
  }
  $batch = array(
    'operations' => $operations,
    'title' => 'Re-konverter adlib dokumenter',
    'init_message' => t('initializing'),
    'progress_message' => t('finished @current of @total'),
    'error_message' => t('something went wrong'),
    'finished'  => '_os2web_adlib_api_bulletpoint_finished',
    'file' => drupal_get_path('module', 'os2web_adlib_api') . '/os2web_adlib_api.module',
  );
  batch_set($batch);
  batch_process();
}

/** 
 * Provides userfeedback when batchjob is finished
 * @author Thomas Thune Hansen <tth@bellcom.dk> 
 */
function _os2web_adlib_api_bulletpoint_finished($success, $results, $operations) {
  error_log("reschedule finished");
  drupal_set_message(t('All bullet points have been rescheduled for conversion'));
}

/**
 * Fetch all nid's for bulletspoints
 * @author Thomas Thune Hansen <tth@bellcom.dk> 
 *
 * @return array with bulletpoint nids
 */
function _os2web_adlib_api_bulletpoint_nid() {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
	->propertyCondition('type', 'bullet_point')
	->execute();
 
  $nodeid = array();

  // Entity query returns an object containing an array, containing arrays...
  foreach ($result as $item)
  {
    foreach ($item as $key => $value) 
    {
      $nodeid[] = $key;   
    }
  }
  return $nodeid;
}

/**
 * Worker function, adds fid's attached to nid's to adlib queue
 * @author Thomas Thune Hansen <tth@bellcom.dk> 
 *
 * @param array containing bulletpoint nids, context information
 */
function _os2web_adlib_api_reprocess_nid($nid, &$context) {
  $node = node_load($nid);

  if(isset($node->field_enclosures))
  {
    foreach($node->field_enclosures['und'] as $file)
    {
      os2web_adlib_api_convert_to_pdf($file[fid]);
      watchdog('adlib_api', 'readded fid to conversion queue:'.$file[fid], null, WATCHDOG_DEBUG);
    }
  }
}

/**
 * Provides an overview of known AdLib jobs.
 * 
 * @access public
 * @return void
 */
function os2web_adlib_api_status() {
  if (isset($_GET['delete'])) {
    $query = db_delete('os2web_adlib_api_doc_files');
    if (is_numeric($_GET['delete'])) {
      $query = $query->condition('fid', $_GET['delete']);
    }
    $query->execute();
    drupal_goto('admin/config/os2web/adlibstatus');
  }
  if (isset($_GET['reset'])) {
    $query = db_delete('os2web_adlib_api_doc_files');
    $query = $query->condition('fid', $_GET['reset']);
    $query->execute();
    os2web_adlib_api_convert_to_pdf($_GET['reset']);
    drupal_goto('admin/config/os2web/adlibstatus');
  }
  if (isset($_GET['process'])) {
    _os2web_adlib_api_do_processing();
    drupal_goto('admin/config/os2web/adlibstatus');
  }
  $adlib = _os2web_adlib_api_get_instance();
  $head = array('Connector Name', 'status', 'Jobs');
  $statuslist = $adlib->getConnectorStatusList();
  $rows = array();
  foreach ($statuslist as $status) {
    $rows[] = array(
        $status->ServerDetail['ServerName'],
        ($status->ServerDetail['Enabled'] == 'True' ? 'E' : 'Not e') . 'nabled - ' . $status->ServerInfo['Status'],
        $status->ServerInfo['JobCount'],
    );
  }
  drupal_add_js(drupal_get_path('module', 'os2web_adlib_api') . '/os2web_adlib_api.js', 'file');
  $html = '<h2>Connector information</h2>';
  $html .= theme('table', array('header' => $head, 'rows' => $rows));
  $head = array('Fid', 'Job-id', 'Status', 'action');
  $rows = array();
  $count = db_query("SELECT COUNT(*) as count FROM {os2web_adlib_api_doc_files} WHERE job_id IS NULL OR job_id NOT LIKE 'Complete'")->fetch();
  $files = db_query("SELECT * FROM {os2web_adlib_api_doc_files} WHERE job_id IS NULL OR job_id NOT LIKE 'Complete' LIMIT 50");
  foreach ($files as $file) {
    $fdata = file_load($file->fid);
    $rows[] = array(
        l($fdata->uri, file_create_url($fdata->uri)),
        $file->job_id,
        array('data' => 'Looking up..', 'class' => 'status', 'id' => $file->fid),
        l('delete', 'admin/config/os2web/adlibstatus', array('query' => array('delete' => $file->fid))) . ' ' . l('reset', 'admin/config/os2web/adlibstatus', array('query' => array('reset' => $file->fid))),
    );
  }
  $html .= '<h2>Active jobs (first 50)</h2>';
  $html .= 'jobs total: '. $count->count;
  $html .= theme('table', array('header' => $head, 'rows' => $rows));
  $html .= l('Delete all', 'admin/config/os2web/adlibstatus', array('query' => array('delete' => 'all')));
  $html .= ' - ' . l('Run processing', 'admin/config/os2web/adlibstatus', array('query' => array('process' => true)));
  return $html;
}

/**
 * Test page for abitrary test usage
 * 
 * @access public
 * @return void
 */
function os2web_adlib_api_page() {
  error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '()');
  $fid = 236605;
  $nid = 840980;
//  os2web_adlib_api_file_delete($fid);
//  db_delete('os2web_adlib_api_doc_files')->condition('fid', $fid)->execute();
//  os2web_adlib_api_convert_to_pdf($fid);
//  os2web_adlib_api_convert_to_html($fid, $nid);
//  _os2web_adlib_api_process_pdf();
//  sleep(5);
//  _os2web_adlib_api_process_pdf();
//  $file = db_select('os2web_adlib_api_doc_files', 'df')->fields('df')->condition('fid', $fid)->execute()->fetchObject();
//  $adlib = _os2web_adlib_api_get_instance();
//  $call = array();
//  $call[] = explode('\\',$adlib->addJobFolder());
//  $call[] = $adlib->deleteJobFolder($call[0][1]);
//  $call = $adlib->getJobStatus($file->job_id);
  // $call= file_load(ADLIB_TEST_FID);
// $call = node_load($nid,NULL,TRUE);

  $files = db_select('file_managed', 'fm')->fields('fm')->execute();
  $rows = array();
  foreach ($files as $file) {
    if (file_exists(drupal_realpath($file->uri))) {
      $rows[] = array(l($file->fid, 'admin/config/os2web/adlibstatus', array('query' => array('reset' => $file->fid))), $file->filename);
    }
  }
  return theme('table', array('rows' => $rows));

//  return '<textarea cols=100 rows=50>' . print_r($call, 1) . '</textarea>';
  return '';
}

/**
 * Implementation of hook_cron()
 */
function os2web_adlib_api_cron() {
  _os2web_adlib_api_do_processing(100);

  //Add set up queue for adlib requeueing
  $queue = DrupalQueue::get('os2web_adlib_reprocess');

  $items = array();
  $items = _os2web_adlib_api_bulletpoint_nid();
  if ($queue->numberOfItems() == 0) {
    foreach ($items as $item){
//      $queue->createItem($item);
    }
  }
}

/**
 * Implements hook_cron_queue_info()
 * @author Thomas Thune Hansen <tth@bellcom.dk> 
 *
 * @return array with queue info
 */
function os2web_adlib_api_cron_queue_info() {
  $queues['os2web_adlib_reprocess'] = array(
    'worker callback' => '_os2web_adlib_api_reprocess_nid',
    'time' => 10,
  );
  return $queues;
}

/**
 * Implementation of hook_init()
 */
function os2web_adlib_api_init() {
  // _os2web_adlib_api_process_pdf(1);
}

/**
 * Converts a fid to html and injects into nid body field
 * 
 * @param int $fid 
 * @param int $nid 
 * @access public
 * @return void
 */
function os2web_adlib_api_convert_to_html($fid, $nid) {
  if (0 === db_query('SELECT fid from {os2web_adlib_api_doc_files} where fid = :fid AND jobtype = :jobtype', array(':fid' => $fid, ':jobtype' => 1))->rowCount()) {
    $record = array(
        'fid' => $fid,
        'did' => $nid,
        'jobtype' => 1,
    );
    drupal_write_record('os2web_adlib_api_doc_files', $record);
    return TRUE;
  } else {
    //      error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File already in queue, aborting.");
    return FALSE;
  }
}

/**
 * Main call to queue file for converting.
 *
 * @param int $fid - fid of a managed file
 * @param int $docref - arbitrary identifier for later reference (ie. Doc id)
 * @return boolean
 */
function os2web_adlib_api_convert_to_pdf($fid, $docref = NULL) {
  $file = file_load($fid);
  if (!file_exists(drupal_realpath($file->uri))) {
    watchdog('adlib_api', 'Cannot queue file %file. File does not exist.', array('%file' => $file->filename), WATCHDOG_WARNING);
    db_delete('os2web_adlib_api_doc_files')->condition('fid', $fid)->execute();
	error_log("filen findes ikke");
    return false;
  }
  if (!_os2web_adlib_api_is_file_pdf($fid)) {
    if (0 === db_query('SELECT fid from {os2web_adlib_api_doc_files} where fid = :fid AND jobtype = :jobtype', array(':fid' => $fid, ':jobtype' => 0))->rowCount()) {
      $record = array(
          'fid' => $fid,
          'did' => $docref,
          'jobtype' => 0,
      );
      drupal_write_record('os2web_adlib_api_doc_files', $record);
      if (ADLIB_TEST_FID) {
        error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File queued for processing.");
      }
      return TRUE;
    } else {
//      error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File already in queue, aborting.");
      return FALSE;
    }
  } else {
//    error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File already PDF.");
    $record = array(
        'fid' => $fid,
        'did' => $docref,
        'job_id' => 'Complete',
    );
    drupal_write_record('os2web_adlib_api_doc_files', $record);
    return FALSE;
  }
}

/**
 * Return the fid of a file saved with a reference
 *
 * @param int $ref Reference for the file
 * @return int
 */
function os2web_adlib_api_get_fid($ref) {
  return (int) db_query('SELECT fid FROM {os2web_adlib_api_doc_files} WHERE did=:did', array(':did' => $ref))->fetchField();
}

/**
 * Factory for class instances. This allows easy changing between api classes.
 * TODO: Make this proper plugin-able.
 *
 * @return AdLibWS object
 */
function _os2web_adlib_api_get_instance() {
  $obj = &drupal_static(__FUNCTION__);
  if (is_object($obj))
    return $obj;
  module_load_include('inc', 'os2web_adlib_api', 'AdLibWS.class');
  return $obj = new AdLibWS();
}

/**
 * This will run the list of files and call the neccesary workers
 * 
 * @param mixed $limit 
 * @access protected
 * @return void
 */
function _os2web_adlib_api_do_processing($limit = FALSE) {
  return;
  if (!lock_acquire(__FUNCTION__, 60)) {
    return;
  }
  watchdog('adlib_api', 'Running PDF/HTML Conversion batch..', null, WATCHDOG_DEBUG);
// Locate any finished jobs
  $files = db_select('os2web_adlib_api_doc_files', 'f')
      ->fields('f')
      ->isNotNull('job_id')
      ->condition('job_id', array('Complete'), 'NOT IN');
  if (ADLIB_TEST_FID) {
    $files = $files->condition('fid', ADLIB_TEST_FID);
  }
  if ($limit !== FALSE) {
    $files->range(0, $limit);
  }
  $files = $files->execute();
  if (count($files) > 0) {
    $adlib = _os2web_adlib_api_get_instance();

    foreach ($files as $file) {
      lock_acquire(__FUNCTION__, 60); // Refresh lock to avoid timeout
      _os2web_adlib_api_process_file($file);
    }
  }
// Start new job if needed
  $files = db_select('os2web_adlib_api_doc_files', 'f')->fields('f')->isNull('job_id');
  if (ADLIB_TEST_FID) {
    $files = $files->condition('fid', ADLIB_TEST_FID);
  }
  if ($limit !== FALSE) {
    $files->range(0, $limit);
  }
  $files = $files->execute();
  while ($file = $files->fetchObject()) {
    _os2web_adlib_api_queue_file($file);
  }
  lock_release(__FUNCTION__);
}

function _os2web_adlib_api_process_file($file) {
  $adlib = _os2web_adlib_api_get_instance();
  $jobinfo = $adlib->getJobStatus($file->job_id);
  switch ($jobinfo->status) {
    case 'Notfound':
    case 'Failed':
      os2web_adlib_api_destroy_job($file->job_id);

      $jobfileinfo = unserialize($file->job_info);

      $fdata = file_load($file->fid);
      if (!file_exists(drupal_realpath($fdata->uri)) || file_uri_scheme($fdata->uri) == '' || $fdata->filemime == 'application/pdf') {
        watchdog('adlib_api', 'Cannot re-queue file %file. File does not exist or is invalid.', array('%file' => $fdata->filename), WATCHDOG_WARNING);
        os2web_adlib_api_file_delete($file);
      } else {
        $record = array(
            'fid' => $file->fid,
            'jobtype' => $file->jobtype,
            'job_id' => 'Requeue',
            'job_info' => null,
        );
        drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid', 'jobtype'));
        watchdog('adlib_api', 'Found a failed job for %file. Resetting.', array('%file' => $fdata->filename), WATCHDOG_WARNING);
      }
      break;
    case 'Complete':
      $jobfileinfo = unserialize($file->job_info);

      $download = curl_init($jobfileinfo['out_url']);
      if (variable_get('os2web_pws_proxy')) {
        curl_setopt($download, CURLOPT_PROXY, variable_get('os2web_pws_proxy_host'));
        curl_setopt($download, CURLOPT_PROXYPORT, variable_get('os2web_pws_proxy_port'));
        curl_setopt($download, CURLOPT_HTTPPROXYTUNNEL, TRUE);
      }
      curl_setopt($download, CURLOPT_RETURNTRANSFER, TRUE);
      $data = curl_exec($download);

      $info = curl_getinfo($download);
      if ($info['http_code'] !== 200) {
        // File not found ??
        $record = array(
            'fid' => $file->fid,
            'jobtype' => $file->jobtype,
            'job_id' => 'Requeue',
            'job_info' => null,
        );
        os2web_adlib_api_destroy_job($file->job_id);
        drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid', 'jobtype'));
        watchdog('adlib_api', 'Completed file (fid: %fid)could not be found on the server (Code: %code). Job reset.', array('%code' => $info['http_code'], '%fid' => $file->fid), WATCHDOG_WARNING);
        break;
      }

      switch ($file->jobtype) {
        case 0: // PDF
          $upd_file = file_load($file->fid);
          $uri = file_unmanaged_save_data($data, str_replace($upd_file->filename, $jobfileinfo['out_filename'], $upd_file->uri), FILE_EXISTS_REPLACE);
          if (filesize(drupal_realpath($uri)) > 0) {
            db_delete('file_managed')->condition('uri', $uri)->execute();
            $upd_file->uri = $uri;
            $upd_file->filename = basename($uri);
            $upd_file->filemime = file_get_mimetype($upd_file->uri);
            $upd_file->filesize = filesize(drupal_realpath($upd_file->uri));
            $upd_file->timestamp = time();
            os2web_adlib_api_destroy_job($file->job_id);
            $record = array(
                'fid' => $file->fid,
                'jobtype' => $file->jobtype,
                'job_id' => 'Complete',
            );
            drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid', 'jobtype'));
            drupal_write_record('file_managed', $upd_file, array('fid'));
            error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File saved, file record updated.");
          } else {
            error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: Filesize was 0. Aborting update.");
          }
          break;
        case 1: // HTML
          $nid = $file->did;
          if ($node = node_load($nid)) {
            $node->field_bpa_body[LANGUAGE_NONE][0]['value'] = _os2web_adlib_api_process_html($data, $jobfileinfo['out_url']);
            $node->field_bpa_body[LANGUAGE_NONE][0]['format'] = 'filtered_html';
            $node->feeds = array();
            node_save($node);
            os2web_adlib_api_destroy_job($file->job_id);
            $record = array(
                'fid' => $file->fid,
                'jobtype' => $file->jobtype,
                'job_id' => 'Complete',
            );
            drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid', 'jobtype'));
            error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '() - File converted, node updated.');
            watchdog('adlib_api', 'File (fid: %fid) was converted successfully.', array('%fid' => $file->fid), WATCHDOG_INFO);
          }
          break;
        default:
          watchdog('adlib_api', 'Unknown jobtype returned from AdLib.', null, WATCHDOG_WARNING);
      }
      break;

    default:
      watchdog('adlib_api', 'Unknown job status: %var', array('%var' => $jobinfo->status), WATCHDOG_WARN);
      break;
  }
}

/**
 * This function validates html and fixes all image links
 *
 * @param type $data
 * @return processed version of input
 */
function _os2web_adlib_api_process_html($data, $base_url) {
  $base_dir = ADLIB_HTML_IMG_FOLDER;
  if (!file_prepare_directory($base_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    watchdog('adlib_api', 'Cannot get write permission for the AdLib image store folder.', null, WATCHDOG_ERROR);
    return;
  }
  module_load_include('php', 'os2web_adlib_api', 'simple_html_dom');
  $html = str_get_html($data);
  $img = $html->find('img');
  for ($i = 0; $i < count($img); $i++) {
    watchdog('adlib_api', 'Importing image for HTML: %fname', array('%fname' => basename($img[$i]->src)));
    $image_url = $base_url . '/' . rawurlencode($img[$i]->src);
    $download = curl_init($image_url);
    if (variable_get('os2web_pws_proxy')) {
      curl_setopt($download, CURLOPT_PROXY, variable_get('os2web_pws_proxy_host'));
      curl_setopt($download, CURLOPT_PROXYPORT, variable_get('os2web_pws_proxy_port'));
      curl_setopt($download, CURLOPT_HTTPPROXYTUNNEL, TRUE);
    }
    curl_setopt($download, CURLOPT_RETURNTRANSFER, TRUE);
    $image = curl_exec($download);

    $info = curl_getinfo($download);
    if ($info['http_code'] === 200) {
      $file_uri = $base_dir . basename(str_replace('\\', '/', $img[$i]->src)); // AdLib uses Windows folder notation
      $file = file_save_data($image, $file_uri, FILE_EXISTS_REPLACE);
      $img[$i]->src = file_create_url($file->uri);
    } else {
      watchdog('adlib_api', 'Failed to fetch image for HTML: %fname', array('%fname' => basename($element->src)), WATCHDOG_WARNING);
    }
  }
  $data = (string) $html;

  // Clean up the html, since AdLib sometimes return less-than-valid html and hence can cause PDO exceptions
  if (!function_exists('tidy_repair_string')) {
    watchdog('adlib_api', 'Tidy API not found! Cannot process HTML.', null, WATCHDOG_ERROR);
  } else {
    $config = array(
//        'clean' => true,
        'indent' => true,
        'output-xhtml' => true,
        'wrap' => 200,
        'word-2000' => true,
        'show-body-only' => true,
    );
    $data = tidy_repair_string($data, $config);
  }
  return $data;
}

/**
 * Worker function that queues up a single file from a row in the job table
 * 
 * @param object $file Object representing a row from the job table
 * @return boolean true on success
 */
function _os2web_adlib_api_queue_file($file) {
  $adlib = _os2web_adlib_api_get_instance();
  $file->file = file_load($file->fid);

  if (is_file(drupal_realpath($file->file->uri))) {
    $upload = $adlib->uploadData($file->file->filename, file_get_contents(drupal_realpath($file->file->uri)));
    if ($upload) {
      $priority = 3; // Normal priority
      if ($file->job_id === 'Requeue') {
        $priority = 5; // Make requeued jobs run on lower priority
      }
      $job = $adlib->addJob($upload, $file->jobtype, $priority);
      if ($job !== FALSE) {
        $jobinfo = array(
            'fid' => $file->fid,
            'jobtype' => $file->jobtype,
            'job_id' => (string) $job->JobSettings['JobID'],
            'job_info' => $upload,
        );
        drupal_write_record('os2web_adlib_api_doc_files', $jobinfo, array('fid', 'jobtype'));
        watchdog('adlib_api', 'Queued file %file for PDF.', array('%file' => $file->file->filename));
        return true;
      } else {
        watchdog('adlib_api', 'Upload of %file failed. Check permissions.', array('%file' => $file->file->filename));
        db_delete('os2web_adlib_api_doc_files')->condition('fid', $file->file->fid)->execute();
      }
    }
  }
  return false;
}

/**
 * _os2web_adlib_api_cleanup_files 
 * 
 * @access protected
 * @return void
 */
function _os2web_adlib_api_cleanup_files() {
  $dir = preg_replace('/\/$/', '', DEFAULT_DOC_CACHE_PATH); // Remove trailing /
  $filelist = file_scan_directory($dir, '/.*/');
  foreach ($filelist as $uri => $file) {
    $file = db_select('file_managed', 'f')->fields('f')->condition('uri', $uri)->execute()->fetchAll();
    if (count($file) === 0) {
      // File is not linked in the drupal database
//        file_unmanaged_delete($uri);
//        error_log(basename(__FILE__) . ':' . __LINE__ . ' Deleted: ' . print_r($uri, 1));
    }
  }
}

/**
 * _os2web_adlib_api_is_file_pdf 
 * 
 * @param mixed $fid 
 * @access protected
 * @return void
 */
function _os2web_adlib_api_is_file_pdf($fid) {
  if (is_array($fid)) {
    $result = array();
    $files = file_load_multiple($fid);
    foreach ($files as $file) {
      $result[$file->fid]['is_pdf'] = strcasecmp(pathinfo($file->filename, PATHINFO_EXTENSION), 'pdf') === 0;
      $result[$file->fid]['file'] = $file;
    }
    return $result;
  } else {
    return strcasecmp(pathinfo(file_load($fid)->filename, PATHINFO_EXTENSION), 'pdf') === 0;
  }
}

function os2web_adlib_api_file_delete($file) {
  if (is_numeric($file)) {
    $file = db_select('os2web_adlib_api_doc_files', 'f')
        ->fields('f')
        ->condition('fid', $file)
        ->execute()
        ->fetchObject();
  }
  os2web_adlib_api_destroy_job($file->job_id);
  db_delete('os2web_adlib_api_doc_files')->condition('fid', $file->fid)->execute();
  watchdog('adlib_api', 'File %file has been cleaned up from adlib conversion table.', array('%file' => $file->uri), WATCHDOG_DEBUG);
}

function os2web_adlib_api_destroy_job($job_id) {
  $file = db_select('os2web_adlib_api_doc_files', 'f')
      ->fields('f')
      ->condition('job_id', $job_id)
      ->execute()
      ->fetchObject();
  if (is_object($file)) {
    $adlib = _os2web_adlib_api_get_instance();
    if (isset($file->job_id) && $file->job_id != 'Complete') {
      $jobfileinfo = unserialize($file->job_info);
      $adlib->deleteJob($file->job_id);
      $folder = explode('\\', $jobfileinfo['basefolder']);
      $adlib->deleteJobFolder($folder[1]);
    }
    watchdog('adlib_api', 'Deleted job for %fid', array('%fid' => $job_id));
  }
}
