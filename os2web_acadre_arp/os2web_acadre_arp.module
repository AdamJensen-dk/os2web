<?php
/**
 * @file
 * Code for the OS2Web Acadre ARP Handler feature.
 */

include_once 'os2web_acadre_arp.features.inc';

/**
 * Implementation of hook_menu().
 */
function os2web_acadre_arp_menu() {
  $items['os2web/ws/arp'] = array(
      'type' => MENU_CALLBACK,
      'page callback' => '_os2web_acadre_arp_soap_server',
      'access callback' => TRUE, 
      );
  return $items;
}

/**
 * _os2web_acadre_arp_soap_server 
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_soap_server(){
  if (isset($_GET['wsdl'])) {
    _os2web_acadre_arp_get_wsdl();
  }
  global $HTTP_RAW_POST_DATA;
  ini_set("soap.wsdl_cache_enabled","0");
  $server = new SoapServer(drupal_get_path('module', 'os2web_acadre_arp').'/os2web_acadre_arp_publishing_handler.wsdl');
  $count = variable_get('os2web_acadre_arp_soap_count',0);
  file_unmanaged_save_data($HTTP_RAW_POST_DATA,'public://soap/request-'.$count++.'.soap.xml');
  variable_set('os2web_acadre_arp_soap_count',$count);

  $server->AddFunction('publish');
  $server->AddFunction('unpublish');
  $server->handle();
}

/**
 * Published a given input type. Delegates actual node creation to worker functions 
 * 
 * @param mixed $info 
 * @param mixed $parentItemId 
 * @access public
 * @return void
 */
function publish($info, $parentItemId){
  $item_id = $info->ItemId;
  error_log("Publish: \$item_id = " . print_r($item_id, 1));

  $meta = $info->Metadata;
  // File was decoded to utf-8 data, so charset will break.
  $meta = preg_replace('/(<\?xml[^?]+?)utf-16/i', '$1utf-8', $meta); 
  $meta=simplexml_load_string($meta) or soap_error(2);

  $type = $meta->getName();
  switch (strtolower($type)) {
    case 'publishedcase':
      return _os2web_acadre_arp_process_case($item_id,$meta);
    case 'publisheddocument':
      return _os2web_acadre_arp_process_document($item_id,$meta,$parentItemId);
    case 'publishedmemo':
      return _os2web_acadre_arp_process_memo($item_id,$meta,$parentItemId);
    default:
      error_log("Unhandled request: \$type = " . print_r($type, 1));
      soap_error(4);
  }
  return 'Ilde request';
//TODO: Old ignored code... needs handling
//
//  $supplement = $info->MetaData->SupplementDocument;
//  if (!empty($supplement)){
//    return _os2web_acadre_arp_process_suplement();
//  } 
//
//  $party = $info->MetaData->Party;
//  if (!empty($party)){
//    return _os2web_acadre_arp_process_party();
//  } 
//
//  $memo = $info->MetaData->Memo;
//  if (!empty($memo)){
//  }
//  return $to_return;
}

/**
 * Unpublishes a given ItemId
 * 
 * @param mixed $item_id 
 * @param mixed $location_id 
 * @access public
 * @return void
 */
function unpublish($item_id, $location_id){
  error_log("Unpublish: \$item_id = " . print_r($item_id, 1));
  $nids =  _os2web_acadre_arp_find_item($item_id);
  if (empty($nids)) {
    return 'Success. No nodes removed.';
  } else {
    foreach ($nids as $nid) {
      node_delete($nid);
    }
    return 'Success. Removed node-id(s): '.implode(',',$nids);
  }
}

// Publishing functions:

/**
 * _os2web_acadre_arp_process_case 
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_process_case($item_id,$meta){
  $node = (object) NULL;
  $node->type = 'arp_case';
  $node->uid = 0;
  $node->status = 1;
  $node->comment = 0;
  $node->promote = 0;
  $node->moderate = 0;
  $node->sticky = 0;
  $node->language = LANGUAGE_NONE;
  node_object_prepare($node);

  $node->title = (string) $meta->Title;
  $node->field_itemid[LANGUAGE_NONE][]['value'] = $item_id;

  node_submit($node);
  node_save($node);

  if (is_numeric($node->nid)) {
    return "Success: Node-id = ".$node->nid;
  } else {
    soap_error(3);
  }
}

/**
 * _os2web_acadre_arp_process_document 
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_process_document($item_id,$meta,$parent_item_id){
  $node = (object) NULL;
  $node->type = 'arp_document';
  $node->uid = 0;
  $node->status = 1;
  $node->comment = 0;
  $node->promote = 0;
  $node->moderate = 0;
  $node->sticky = 0;
  $node->language = LANGUAGE_NONE;
  node_object_prepare($node);

  $node->title = (string) $meta->Title;
  $node->field_itemid[LANGUAGE_NONE][]['value'] = $item_id;

  node_submit($node);
  node_save($node);
  if (!is_numeric($node->nid)) {
    soap_error(3);
  }

  // Locate parent node.
  $parent_nid =  array_shift(_os2web_acadre_arp_find_item($parent_item_id)); // Assume first element in case of confusion (shouldn't happen)
  if ($parent_node = node_load($parent_nid)) {
    $parent_node->field_documents[LANGUAGE_NONE][]['nid'] = $node->nid;
    error_log("Var: \$var = " . print_r($parent_node->field_documents, 1));
    node_submit($parent_node);
    node_save($parent_node);
  } else {
    node_delete($node->nid);
    soap_error(5);
  }

  return "Success: Node-id = ".$node->nid;
}

/**
 * _os2web_acadre_arp_process_memo 
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_process_memo($item_id,$meta,$parent_item_id){
  return "memo is processed";
}

/**
 * _os2web_acadre_arp_process_supplement 
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_process_supplement(){
  return "supplement is processed";
}

/**
 * _os2web_acadre_arp_process_party 
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_process_party(){
  return "party is processed";
}

// Helpers

/**
 * Dumps the wsdl for the serivce
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_get_wsdl(){
  $filename = drupal_get_path('module', 'os2web_acadre_arp').'/os2web_acadre_arp_publishing_handler.wsdl';
  $handle = fopen ($filename, 'r'); 
  $contents = fread ($handle, filesize ($filename)); 
  fclose ($handle); 

  drupal_add_http_header('Connection', 'close', FALSE);
  drupal_add_http_header('Content-Length', drupal_strlen($contents), TRUE);
  drupal_add_http_header('Content-Type', 'text/plain; charset=utf-8', TRUE);
  drupal_add_http_header('Date', date('r'), TRUE);

  $replacements = array(
      '!endpointurl' => 'http'.($_SERVER['HTTPS']==='on'?'s':'').'://'.$_SERVER['SERVER_NAME'].str_replace('?wsdl','',$_SERVER['REQUEST_URI']),
      );
  echo format_string($contents,$replacements);
  exit;
}

/**
 * Throws a soap exception with a message. 
 * 
 * @param mixed $code 
 * @access public
 * @return void
 */
function soap_error($code) {
  $code_msg = array( 
      1 => 'Test error, please ignore.',
      2 => 'Malformed XML.',
      3 => 'Unable to create content.',
      4 => 'Usupported document type.',
      5 => 'Parent node not located.',
      );
  throw new SoapFault((string)$code, isset($code_msg[$code])?$code_msg[$code]:'Unknown error');
}

/**
 * Locates nids with a given ItemId 
 * 
 * @param string $item_id 
 * @access protected
 * @return array of nids
 */
function _os2web_acadre_arp_find_item($item_id) {
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', array('arp_case','arp_document'))
    ->propertyCondition('status', 1)
    ->fieldCondition('field_itemid', 'value', $item_id, '=')
    ->execute();
  $nids = array_keys($result['node']);
  return $nids;
}

function os2web_acadre_arp_node_delete($node) {
  if ($node->type == 'arp_case') {
    foreach ($node->field_documents[LANGUAGE_NONE] as $delta => $info) {
      node_delete($info['nid']);
    }
  }
}

function _os2web_acadre_arp_get_file($item_id, $version) {

}
