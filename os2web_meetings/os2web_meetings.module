<?php

define('DEFAULT_ACADRE_IMPORT_DIR', 'public://acadre');
define('MEETINGS_FORCE_RECREATE', true); // Delete existing nodes before import
define('MEETINGS_FOCUS', false); // File key for import
define('MEETINGS_MEETING_FOCUS', false); // Meeting id
define('MEETINGS_CLEAR_COMMITTEE', false); // Clean out invalid committees
define('MEETINGS_DEFAULT_APPROVED','62,59,64,53,54,56,57,63,58,51,55,61,68,69,42');

function os2web_meetings_menu() {
  $items = array();
  $items['os2web/test/meetings/batch'] = array(
      'page callback' => 'os2web_meetings_do_import_batch',
      'access arguments' => array('administer os2web'),
      'type' => MENU_CALLBACK,
  );
  $items['os2web/test/meetings'] = array(
      'page callback' => 'os2web_meetings_test_page',
      'access arguments' => array('administer os2web'),
      'type' => MENU_CALLBACK,
  );
  $items['node/%/control'] = array(
      'page callback' => '_os2web_meetings_node_tab_page',
      'page arguments' => array(1, 3),
      'access callback' => '_os2web_meetings_node_tab_access',
      'access arguments' => array(1),
      'title' => 'Meeting control',
      'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function _os2web_meetings_node_tab_access($nid) {
  $node = node_load($nid);
  if ($node->type != 'meeting')
    return false;
  return user_access('administer os2web');
}

function _os2web_meetings_node_tab_page($nid, $op = FALSE) {
  $html = "";
  $node = node_load($nid);
  $meeting_id = $node->field_meeting_id[LANGUAGE_NONE][0]['value'];
  $system_id = $node->field_system_id[LANGUAGE_NONE][0]['value'];
  $filename = 'Unknown';
  $files = file_scan_directory(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), '/\.xml$/i', array('recurse' => false));
  foreach ($files as $file) {
    $xml = simplexml_load_file(drupal_realpath($file->uri));
    if (is_object($xml)) {
      $xml_mid = (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field/@sysid"));
      if ($meeting_id == $xml_mid) {
        $filename = $file->filename;
        $agenda = $xml->xpath("//table[@name='producedAgenda']/fields/field[@sysid='$system_id']/../field");
        if (!empty($agenda))
          break;
      }
    }
  }

  if ($op) {
    switch ($op) {
      case 'reimport':
        _os2web_meetings_process_manifest($file->uri, $system_id);
        os2web_meetings_order_addenums();
        break;
      default:
        drupal_set_message($op . ' not yet implemented.', 'error');
        break;
    }
    drupal_goto('node/' . $nid . '/control');
  }

  $html .= "<h1>" . $node->title . "</h1>";

  $head = array('Node id', 'Meeting id', 'System id', 'Filename');
  $rows[] = array(
      $node->nid,
      $meeting_id,
      $system_id,
      $filename,
  );
  $html .= theme('table', array('header' => $head, 'rows' => $rows));
  $head = array('Attribute', 'Value');
  $rows = array();
  foreach ($agenda as $attr) {
    foreach ($attr->attributes() as $key => $val) {
      $rows[] = array($key, $val);
    }
  }
  $html .= theme('table', array('header' => $head, 'rows' => $rows));

  $html .= l('Re-import', 'node/' . $node->nid . '/control/reimport');

  return $html;
}

/**
 * Implemetation of hook_cron()
 * Will run import on every cron.
 */
function os2web_meetings_cron() {
    $files = file_scan_directory(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), '/\.xml$/i', array('recurse' => FALSE));
    $queue = DrupalQueue::get('import_agendas');
    if ($queue->numberOfItems() == 0) {
      foreach ($files as $file) {
        $queue->createItem($file->uri);
      }
    }
    $queue->createItem(FALSE); // Runs the addenum reordering
}

function os2web_meetings_cron_queue_info() {
  $queues['import_agendas'] = array(
      'worker callback' => '_os2web_meetings_process_manifest',
      'time' => 300,
  );
  return $queues;
}

/**
 * Implementation of hook_form_alter()
 */
function os2web_meetings_form_os2web_settings_settings_form_alter(&$form, &$form_state) {
  $form['meetings'] = array(
      '#type' => 'fieldset',
      '#title' => 'Referat import',
      '#description' => 'Indstillinger der vedrører importen af Acadre referater og dagsordener.',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
  );
  $form['meetings']['os2web_meetings_path'] = array(
      '#type' => 'textfield',
      '#title' => 'Sti til acadre publish folder.',
      '#description' => 'Dette er stien hvor Acadre publisere .XML filer til.',
      '#default_value' => variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR),
  );
//  $form['meetings']['os2web_meetings_invalid_committee'] = array(
//      '#type' => 'textfield',
//      '#title' => 'Udvalg der ikke skal importeres',
//      '#maxlength' => 200,
//      '#description' => 'Komma sepereret liste over udvalg der ikke skal inkluderes i importen.',
//      '#default_value' => variable_get('os2web_meetings_invalid_committee', 'Direktionsmøde, Direktions og afdelingschef møde, Rådhusmad, Test udvalg, Traen udvalg, Nedlagte udvalg'),
//  );
  $form['meetings']['os2web_meetings_approved_committee'] = array(
      '#type' => 'textfield',
      '#title' => 'Godkendte Udvalg',
      '#maxlength' => 200,
      '#description' => 'Komma sepereret liste over udvalgs-id der er godkendt til publisering.',
      '#default_value' => variable_get('os2web_meetings_approved_committee', MEETINGS_DEFAULT_APPROVED),
  );
}

function os2web_meetings_test_page() {
  global $debug_info;
  // $date = '2012-06-21 13:00';
//
//  $date_obj = date_create($date);
//  date_timezone_set($date_obj, timezone_open( 'UTC'));
//  $date = date_format($date_obj, 'Y-m-d H:i');
//
  // $debug_info = $date . "\n";
  // $date = strtotime($date);
  // $debug_info.= format_date($date,'medium','','Europe/Berlin');
//$debug_info.= print_r($dateObj,1);
  // _os2web_meetings_clear_committees();
//  os2web_meetings_do_import();
  //os2web_meetings_order_addenums();
//os2web_meetings_do_import_batch();
// _os2web_meetings_cleanup_nodes('meeting',$bleh);
  //return '<div><textarea cols="150" rows=50>' . print_r($debug_info, 1) . '</textarea>';
  if (!isset($_GET['op']))
    $_GET['op'] = 'none';
  switch ($_GET['op']) {
    case 'clean':
      _os2web_meetings_delete_meetings();
      break;
    case 'addenums':
      os2web_meetings_order_addenums();
      drupal_set_message(t('Addenum meetings reordered'));
      break;
    default:
      $links = array(
          'heading' => 'Actions:',
          'links' => array(
              array('title' => 'Kør import', 'href' => "os2web/test/meetings/batch"),
              array('title' => 'Reorder addenums', 'href' => "os2web/test/meetings",'query' => array('op' => 'addenums')),
              array('title' => 'Slet meetings', 'href' => "os2web/test/meetings",'query' => array('op' => 'clean')),
          )
      );
      return theme('links',$links);
  }
  drupal_goto('os2web/test/meetings');
}

function _os2web_meetings_delete_meetings($nids = false) {
  if ($nids === false) {
    $batch = array(
        'title' => 'Meeting cleanup.',
        'operations' => array(),
    );
    $nids = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('type', array('meeting','bullet_point','bullet_point_attachment'))
        ->execute()
        ->fetchCol();
    $nids = array_chunk($nids, 10);
    foreach ($nids as $nid_chunk) {
      $batch['operations'][] = array('_os2web_meetings_delete_meetings', array($nid_chunk));
    }
    batch_set($batch);
    batch_process('os2web/test/meetings');
  } else {
    if (!empty($nids)) {
      node_delete_multiple($nids);
      watchdog('os2web_meetings', 'Deleted %count nodes.', array('%count' => count($nids)));
    }
  }
}

/**
 * Import xml files from the defined folder
 *
 */
function os2web_meetings_do_import_batch() {
  $focus = MEETINGS_FOCUS;
  //$focus = false;
  $batch = array(
      'title' => 'Dagsorden import',
      'operations' => array(
//      array('_os2web_meetings_cleanup_nodes',array('meeting')),
//      array('_os2web_meetings_cleanup_nodes',array('bullet_point')),
//      array('_os2web_meetings_cleanup_nodes',array('bullet_point_attachment')),
      ),
      'finished' => 'os2web_meetings_order_addenums',
  );
  if (MEETINGS_CLEAR_COMMITTEE) {
    $batch['operations'][] = array('_os2web_meetings_clear_committees', array());
  }
  $options = array(
//      'callback' => '_os2web_meetings_process_manifest',
      'recurse' => FALSE,
  );
  $files = file_scan_directory(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), '/\.xml$/i', $options);
  foreach ($files as $file) {
    if ($focus !== false) {
      if (strpos($file->name, (string) $focus) !== FALSE) {
        $batch['operations'][] = array('_os2web_meetings_process_manifest', array($file->uri, MEETINGS_FORCE_RECREATE));
        error_log("FOCUS Importing " . $file->name . " from: " . $file->uri);
      } else {
        error_log("FOCUS Importing did nothing. Did you set the right format only the number from the XML file. You set it to " . $focus);
      }
    } else {
      $batch['operations'][] = array('_os2web_meetings_process_manifest', array($file->uri, MEETINGS_FORCE_RECREATE));
    }
  }
  if ($focus) {
    error_log("Var FOCUS SET: \$batch = " . print_r($batch, 1));
  }
  batch_set($batch);
  batch_process('os2web/test/meetings');
}

/**
 * Import xml files from the defined folder
 *
 */
function os2web_meetings_do_import() {
  $options = array(
      'callback' => '_os2web_meetings_process_manifest',
      'recurse' => FALSE,
  );
  file_scan_directory(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), '/\.xml$/i', $options);
}

/**
 * This function will set up the addenum connections for meetings.
 *
 */
function os2web_meetings_order_addenums() {
  $rev_meetings = array( 1458);
  // Find all meetings and gather meeting and agenda_ids
  $nodes = entity_load('node', FALSE, array('type' => 'meeting'));
  $meetings = array();
  // meetings as: $meetings[<meeting_id>][<system_id>][<node_id>]
  $nids = array();
  foreach ($nodes as $node) {
    $addenum_to =field_get_items('node', $node, 'field_addenum_to'); 
    if (isset($addenum_to[0]['nid']) && is_numeric($addenum_to[0]['nid'])) {
      $nids[$node->nid]=$node->nid;
    }
    $meeting_id = array_shift(field_get_items('node', $node, 'field_meeting_id'));
    $system_id = array_shift(field_get_items('node', $node, 'field_system_id'));
    if (isset($meetings[$meeting_id['value']][$system_id['value']])) {
      // Duplicate meeting detected.
      watchdog('os2web_meetings', 'Duplicate import found for meeting %mid. Deleting.', array('%mid' => $meeting_id['value']), WATCHDOG_ERROR);
      node_delete($node->nid);
    } else {
      $meetings[$meeting_id['value']][$system_id['value']] = $node->nid;
    }
  }
  foreach ($meetings as $m_id => $meeting) {
    ksort($meeting); // Lowest system id first
    if (in_array($m_id, $rev_meetings)) {
      $meeting = array_reverse($meeting);
    }
    $primary = array_shift($meeting); // Lowest system id is primary
    while ($next = array_shift($meeting)) {
      // Set up references for addenum agendas
      $node = $nodes[$next];
      $node->field_addenum_to[$node->language][0]['nid'] = $primary;
      node_save($node);
      unset($nids[$node->nid]);
//      watchdog('os2web_meetings', 'Updated %nid1 as addenum to %nid2 .', array('%nid1' => $node->nid, '%nid2' => $primary), WATCHDOG_INFO);
    }
  }
  foreach ($nids as $nid) {
    $node = node_load($nid);
    $node->field_addenum_to = array();
    node_save($node);
  }
}

/**
 * Processes a manifest file
 * 
 * @param string $file File URI. Works as callback in file_scan_directory works.
 */
function _os2web_meetings_process_manifest($file, $force = MEETINGS_FORCE_RECREATE) {
  if ($file === FALSE) { 
    os2web_meetings_order_addenums();
  }
  $manifest = simplexml_load_file(drupal_realpath($file));
  if (is_object($manifest)) {
    if (is_numeric($force)) {
      $items_xml = $manifest->xpath("//table[@name='producedAgenda']/fields/field[@sysid='$force']/..");
    } else {
      $items_xml = $manifest->xpath("//table[@name='producedAgenda']/fields");
    }
    if (empty($items_xml)) {
      watchdog('os2web_meetings', 'Empty list of import items in %file.', array('%file' => $file), WATCHDOG_WARNING);
    }
    foreach ($items_xml as $xml_item) {
      _os2web_meetings_process_agenda($file, $xml_item, $force);
    }
  } else {
    watchdog('os2web_meetings', 'Failed to parse XML in %file during import.', array('%file' => $file), WATCHDOG_WARNING);
    error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' - Failed to read file: ' . $file);
  }
}

/**
 * Processes an agenda item
 *
 * @param SimpleXMLElement $agendainfo Chunk of XML representing the agenda part.
 */
function _os2web_meetings_process_agenda($file, $agendainfo_xml, $force = false) {
  $agendainfo = array(
      'sysid' => (int) array_shift($agendainfo_xml->xpath('field/@sysid')),
      'xmlFusionID' => (int) array_shift($agendainfo_xml->xpath('field/@xmlFusionID')),
      'xmlfilename' => (string) array_shift($agendainfo_xml->xpath('field/@xmlfilename')),
      'docID' => (string) array_shift($agendainfo_xml->xpath('field/@docID')),
      'docfilename' => (string) array_shift($agendainfo_xml->xpath('field/@docfilename')),
      'type' => (int) array_shift($agendainfo_xml->xpath('field/@type')),
      'comment' => (string) array_shift($agendainfo_xml->xpath('field/@comment')),
      'fileType' => (string) array_shift($agendainfo_xml->xpath('field/@fileType')),
      'access' => (string) array_shift($agendainfo_xml->xpath('field/@access')),
      'accessid' => (int) array_shift($agendainfo_xml->xpath('field/@accessid')),
      'publish' => (int) array_shift($agendainfo_xml->xpath('field/@publish')),
      'publishDate' => (string) array_shift($agendainfo_xml->xpath('field/@publishDate')),
      'createdDate' => (string) array_shift($agendainfo_xml->xpath('field/@createdDate')),
      'filesfolder' => (string) array_shift($agendainfo_xml->xpath('field/@filesfolder')),
      'casePublish' => (string) array_shift($agendainfo_xml->xpath('field/@casePublish')),
      'startDate' => (string) array_shift($agendainfo_xml->xpath('field/@startDate')),
      'endDate' => (string) array_shift($agendainfo_xml->xpath('field/@endDate')),
 
  );
  if ($agendainfo['publish'] === 1 && 
      $agendainfo['access'] !== 'Lukket' && 
      $agendainfo['filesfolder'] != '') {
    $agenda_uri = implode('/', array(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), $agendainfo['filesfolder'], $agendainfo['xmlfilename']));
    if (($agenda_uri = _os2web_meetings_similar_file_exists(drupal_realpath($agenda_uri))) !== FALSE) {
      $agenda_xml = simplexml_load_file(drupal_realpath($agenda_uri));
      if (is_object($agenda_xml)) {
        $import_nid = _os2web_meetings_publish_meeting($agendainfo, $agenda_xml, $force);
        if (!$import_nid) {
          // No longer a valid import
          _os2web_meetings_unpublish_meeting($agendainfo);
        } elseif (is_numeric($force) && is_numeric($import_nid)) {
          error_log("Valid import in _os2web_meetings_process_agenda:" . $import_nid);
          drupal_goto('node/' . $import_nid . '/control');
        }
      }
    } else {
      watchdog('os2web_meetings', 'Failed to read agenda manifest file %uri', array('%uri' => $agenda_uri), WATCHDOG_WARNING);
    }
  } else {
    _os2web_meetings_unpublish_meeting($agendainfo);
  }
}

/**
 * Removes a meeting node from the infomation supplied.
 *
 * @return bool Nid og the created node.
 * @param array $info
 */
function _os2web_meetings_unpublish_meeting($info) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'meeting')
      ->fieldCondition('field_system_id', 'value', $info['sysid'], '=')
      ->execute();
  if (isset($result['node'])) {
    $nid = array_shift($result['node'])->nid;
    watchdog('os2web_meetings', 'Imported agenda has been invalidated. (nid: %nid)', array('%nid' => $nid));
    node_delete($nid);
    watchdog('os2web_meetings', 'Nodo nid: %nid unpublished.', array('%nid' => $result['node']->nid), WATCHDOG_INFO);
  }
}

/**
 * Creates a meeting node from the infomation supplied.
 *
 * @return int Nid of the created node.
 * @param array $info
 * @param array $xml
 */
function _os2web_meetings_publish_meeting($info, $xml, $force = false) {
  global $debug_info;
  $debug_info = $xml;


  $no_publish_committee = explode(',', variable_get('os2web_meetings_invalid_committee', 'Direktionsmøde, Direktions og afdelingschef møde, Rådhusmad, Test udvalg, Traen udvalg, Nedlagte udvalg'));
  foreach ($no_publish_committee as $key => $value) {
    $no_publish_committee[$key] = trim($value);
  }
  $approved_committees = explode(',', variable_get('os2web_meetings_approved_committee', MEETINGS_DEFAULT_APPROVED));
  foreach ($approved_committees as $key => $value) {
    $publish_committee[$key] = trim($value);
  }

  //TODO: Look for previously imported version to update
  // Create meeting node
  // Gather info
  $options = array(
      'title' => (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field[@name='name']")),
      'date' => (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field[@name='date']")),
      'finish' => (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field[@name='finish']")),
      'location' => (string) array_shift($xml->xpath("//table[@name='location']/fields/field[@name='name']")),
      'committee' => (string) array_shift($xml->xpath("//table[@name='committee']/fields/field[@name='name']")),
      'committee_id' => (string) array_shift($xml->xpath("//table[@name='committee']/fields/field[@name='sysid']")),
      'description' => (string) array_shift($xml->xpath("//table[@name='agenda']/fields/field[@name='description']")),
      'cdate' => strtotime((string) array_shift($xml->xpath("//table[@name='agenda']/fields/field[@name='producedate']"))),
      'meeting_id' => (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field[@name='sysid']")),
      'id' => $info['sysid'],
  );
  if ($options['committee'] == '' || !in_array($options['committee_id'], $publish_committee)) {
    watchdog('os2web_meetings','Ignored agenda from %committee .',array('%committee'=>$options['committee']));
    return false;
  }
  

  if (MEETINGS_MEETING_FOCUS) {
    if ($options['meeting_id'] != MEETINGS_MEETING_FOCUS) {
      return true;
    }
  }

  if (is_numeric($force)) {
    if ($options['id'] != $force) {
      return true;
    }
  }


  $query = new EntityFieldQuery();

  $result = $query->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'meeting')
      ->fieldCondition('field_system_id', 'value', $options['id'], '=')
      ->execute();
  if (isset($result['node'])) {
    $nid = array_shift($result['node'])->nid;
    if ($force) {
      error_log("Var: \$force = " . print_r($force, 1));
      error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . ' - Removing nid: ' . $nid);
      node_delete($nid);
      watchdog('os2web_meetings', 'Removed %nid prior to import.', array('%nid' => $nid), WATCHDOG_DEBUG);
      $node = new stdClass(); // We create a new node object
    } else {
      watchdog('os2web_meetings', 'Meeting already imported in %nid. Skiping.', array('%nid' => $nid), WATCHDOG_DEBUG);
      return true;
    }
  } else {
    $node = new stdClass(); // We create a new node object
  }
  $node->type = "meeting"; // Or any other content type you want
  $node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
  $node->uid = 1; // Or any id you wish

  $node->title = $options['title'];
  $node->path = array('alias' => 'agenda/' . $options['id']); // Setting a node path
  node_object_prepare($node); // Set some default values.

  $node->created = $options['cdate'];
  // Let's add standard body field
  $node->field_meeting_abbr[$node->language][0]['value'] = substr($options['description'], 0, 49);
  $node->field_meeting_abbr[$node->language][0]['format'] = 'filtered_html'; // If field has a format, you need to define it. Here we define a default filtered_html format for a body field
  // The date
  $date_obj = date_create($options['date']);
  date_timezone_set($date_obj, timezone_open('UTC'));
  $node->field_date[$node->language][0]['value'] = date_format($date_obj, 'Y-m-d H:i');
  $date_obj = date_create($options['finish']);
  date_timezone_set($date_obj, timezone_open('UTC'));
  $node->field_date[$node->language][0]['value2'] = date_format($date_obj, 'Y-m-d H:i');
  $node->field_date[$node->language][0]['timezone'] = 'Europe/Berlin';
//  $node->field_date[$node->language][0]['timezone_db'] = 'Europe/Berlin';
  $node->field_date[$node->language][0]['date_type'] = 'datetime';
  // Proper id tagging
  $node->field_meeting_id[$node->language][0]['value'] = $options['meeting_id'];
  $node->field_system_id[$node->language][0]['value'] = $options['id'];
  // Type import
  if ($info['type'] == 1) {
    $node->field_meeting_type[$node->language][0]['value'] = 'Dagsorden';
  } elseif ($info['type'] == 2) {
    $node->field_meeting_type[$node->language][0]['value'] = 'Referat';
  } else {
    watchdog('os2web_meetings', 'Unknown meeting type value: %type', array('%type' => $info['type']), WATCHDOG_WARNING);
  }
  // Make sure the committee term is created and get the term.
  $committee_term = _os2web_meetings_import_committee(array_shift($xml->xpath("//table[@name='committee']")));
  $node->field_committee[LANGUAGE_NONE][0]['tid'] = $committee_term->tid;
  $location_term = _os2web_meetings_import_location(array_shift($xml->xpath("//table[@name='meeting']")));
  $node->field_location[LANGUAGE_NONE][0]['tid'] = $location_term->tid;

  // Add QBrick info
  $movie_id = _os2web_qbrick_get_movie_id($node);
  if ($movie_id != FALSE) {
    $info['movie_id'] = $movie_id;
    $info['movie_chapters'] = _os2web_qbrick_get_chapters($movie_id);
    $node->field_qbrick_ref[$node->language][0]['id'] = $movie_id;
    $node->field_qbrick_ref[$node->language][0]['seek'] = 0;
  } else {
    $node->field_qbrick_ref = array();
  }

  // Add full document
  $fname = $info['docfilename'];
  $folder = $info['filesfolder'];
  $file = _os2web_meetings_import_file($fname, $folder, _os2web_meetings_sanetize_filename($node->title));
  if (FALSE !== $file)
    $node->field_full_doc[LANGUAGE_NONE][] = (array) $file;

  //Add nodes for each bullet
//  $items = $xml->xpath("//table[@name='agendaitem']");
  $items = $xml->xpath("//table[@name='agendaitemparents']");
  $item_nids = array();
  foreach ($items as $item) {
    $xml = array_shift($item->xpath("table[@name='agendaitem']"));
    $id = (int) array_shift($item->xpath("fields/field[@name='sort']"));
    $item_nids[] = _os2web_meetings_add_item($info, $xml, $id);
    // add node for each items
  }

  foreach ($item_nids as $nid) {
    $node->field_ref_bullet_points[$node->language][]['target_id'] = $nid;
  }

  // Add items to meeting node.
  // Save the meeting node.
  node_submit($node);
  node_save($node);
  error_log("Created: \$node->nid = " . print_r($node->nid, 1));
  watchdog('os2web_meetings', 'Imported agenda id: %aid (Meeting: %mid) into node %nid .', array('%aid' => $options['id'], '%mid' => $options['meeting_id'], '%nid' => $node->nid), WATCHDOG_DEBUG);
  //TODO: add reference to the os2web_meetings_import table
  $record = array(
      'nid' => $node->nid,
      'aid' => $options['id'],
  );
  drupal_write_record('os2web_meetings_imported', $record);
  return $node->nid;
}

function _os2web_meetings_add_item($info, $xml, $id) {
  $options = array(
      'sysid' => (int) array_shift($xml->xpath("fields/field[@name='sysid']")),
      'name' => (string) array_shift($xml->xpath("fields/field[@name='name']")),
      'access' => (string) array_shift($xml->xpath("fields/field[@name='accessname']")),
  );
  $closed = $options['access'] === 'Lukket';

  $node = new stdClass();
  $node->type = "bullet_point"; // Or any other content type you want
  $node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
  $node->uid = 1; // Or any id you wish
  $node->title = 'Punkt ' . $id . ' ' . $options['name'];
  node_object_prepare($node); // Set some default values.

  if ($closed) {
    $node->field_bul_point_closed[LANGUAGE_NONE][]['value'] = 0;
    node_submit($node);
    node_save($node);

    return $node->nid;
  } // else....

  $node->field_bul_point_closed[LANGUAGE_NONE][]['value'] = 1;

  // Gather the bullets for the item
  $bullets = $xml->xpath("table[@name='bullet']");
  $nids = array();
  foreach ($bullets as $bullet) {
//    $bullet_id = (int) array_shift($bullet->xpath("fields/field[@name='sysid']"));
    // Add node for each bullet
    $nid = _os2web_meetings_add_bullet($bullet);
    if ($nid !== FALSE) {
      $nids[] = $nid;
    }
  }

  if (isset($info['movie_id']) && is_numeric($info['movie_chapters'][$id])) {
    $node->field_qbrick_ref[$node->language][0]['id'] = $info['movie_id'];
    $node->field_qbrick_ref[$node->language][0]['seek'] = $info['movie_chapters'][$id];
  }

  foreach ($nids as $nid) {
    $node->field_ref_attachment[LANGUAGE_NONE][]['target_id'] = $nid;
  }

  //TODO: Gather enclosures
  $enclosures = $xml->xpath("table[@name='enclosure']");
  foreach ($enclosures as $enclosure) {
    $filename_in = (string) array_shift($enclosure->xpath("fields/field[@name='filename']"));
    $title = (string) array_shift($enclosure->xpath("fields/field[@name='name']"));

    $file = _os2web_meetings_import_file($filename_in, $info['filesfolder'], $title);
    if (FALSE !== $file)
      $node->field_enclosures[$node->language][] = (array) $file;
  }
  node_submit($node);
  node_save($node);

  return $node->nid;
}

/**
 * Creates a bullet node from xml input
 *
 * @param SimpleXMLElement $xml
 * @return int - Node ID
 */
function _os2web_meetings_add_bullet(SimpleXMLElement $xml) {

  $options = array(
      'sysid' => (int) array_shift($xml->xpath("fields/field[@name='sysid']")),
      'name' => (string) array_shift($xml->xpath("fields/field[@name='bulletname']")),
      'content' => (string) array_shift($xml->xpath("fields/field[@name='bulletcontent']")),
      'type' => (int) array_shift($xml->xpath("fields/field[@name='bullettype']")),
      'weight' => (int) array_shift($xml->xpath("fields/field[@name='bulletsortorder']")),
      'lastbullet' => (int) array_shift($xml->xpath("fields/field[@name='lastbullet']")),
  );
  if ($options['content'] === '') {
    return FALSE;
  }
  $node = new stdClass();
  $node->type = "bullet_point_attachment"; // Or any other content type you want
  $node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
  $node->uid = 1; // Or any id you wish

  $node->title = $options['name'];

  node_object_prepare($node); // Set some default values.
  // Let's add standard body field
  $node->field_bpa_body[$node->language][0]['value'] = $options['content'];
  $node->field_bpa_body[$node->language][0]['format'] = 'filtered_html'; // If field has a format, you need to define it. Here we define a default filtered_html format for a body field
//  $node->field_weight[LANGUAGE_NONE][0]['value'] = $options['weight'];

  node_submit($node);
  node_save($node);

  return $node->nid;
}

/**
 * Processes xml for committee and creates terms as needed.
 *
 * @param SimpleXMLElement $xml
 * @return \stdClass 
 */
function _os2web_meetings_import_committee(SimpleXMLElement $xml) {
  //TODO: Process members of the committee.
  //FIXME: MAke vocab name configurable.
  $vid = db_select('taxonomy_vocabulary', 'tv')
      ->fields('tv', array('vid'))
      ->condition('machine_name', 'committee')
      ->execute()
      ->fetchField();

  $term = new stdClass();
  $term->vid = $vid;
  $term->name = (string) array_shift($xml->xpath("fields/field[@name='name']"));
  $term->description = (string) array_shift($xml->xpath("fields/field[@name='description']"));
  $term->field_department_id[LANGUAGE_NONE][0]['value'] = (int) array_shift($xml->xpath("fields/field[@name='deptid']"));
  $term->field_department_name[LANGUAGE_NONE][0]['value'] = (string) array_shift($xml->xpath("fields/field[@name='departmentName']"));

  $tid = db_select('taxonomy_term_data', 'td')
          ->fields('td', array('tid'))
          ->condition('name', $term->name)
          ->condition('vid', $term->vid)
          ->execute()->fetchObject();

  if (isset($tid->tid) && $tid->tid > 0) {
    $term->tid = (int) $tid->tid;
  }
  taxonomy_term_save($term);

  return $term;
}

/**
 * Processes xml for location and creates terms as needed.
 *
 * @param SimpleXMLElement $xml
 * @return \stdClass
 */
function _os2web_meetings_import_location(SimpleXMLElement $xml) {
  //TODO: Process members of the committee.
  //FIXME: MAke vocab name configurable.
  $vid = db_select('taxonomy_vocabulary', 'tv')
      ->fields('tv', array('vid'))
      ->condition('machine_name', 'lokation')
      ->execute()
      ->fetchField();

  $term = new stdClass();
  $term->vid = $vid;
  $term->name = (string) array_shift($xml->xpath("fields/field[@name='location']"));
  $term->description = (string) array_shift($xml->xpath("fields/field[@name='address']"));

  $tid = db_select('taxonomy_term_data', 'td')
          ->fields('td', array('tid'))
          ->condition('name', $term->name)
          ->condition('vid', $term->vid)
          ->execute()->fetchObject();

  if (isset($tid->tid) && $tid->tid > 0) {
    $term->tid = (int) $tid->tid;
  }
  taxonomy_term_save($term);

  //error_log(basename(__FILE__) . ':' . __LINE__ . ' Var: $term = ' . print_r($term, 1));
  return $term;
}

/**
 * Case insensitive fileexists(). Code from comments on php.net
 *
 * @param string $filename
 * @return mixed Flase if file not found, case corrected filename if found.
 */
function _os2web_meetings_similar_file_exists($filename) {
  if (file_exists($filename)) {
//    error_log(basename(__FILE__) . ':' . __LINE__ . ' _os2web_meetings_similar_file_exists FILE EXISTS = ' . $filename);
    return $filename;
  }

  $dir = dirname($filename);
  $files = glob($dir . '/*');
  $lcaseFilename = strtolower($filename);
  foreach ($files as $file) {
    //error_log(basename(__FILE__) . ':' . __LINE__ . ' _os2web_meetings_similar_file_exists looking for file = ' . $file);
    //error_log(basename(__FILE__) . ':' . __LINE__ . ' _os2web_meetings_similar_file_exists compare file = ' . $file . ' == ' . $lcaseFilename);
    if (strtolower($file) == $lcaseFilename) {
      //error_log(basename(__FILE__) . ':' . __LINE__ . ' _os2web_meetings_similar_file_exists  = file check ' . $strtolower($file) . ' == ' . $lcaseFilename);
      return $file;
    }
  }
  return false;
}

function os2web_meetings_node_delete($node) {
  if ($node->type === 'meeting') {
    db_delete('os2web_meetings_imported')->condition('nid', $node->nid)->execute();
    //TODO: Delete bullets from meeting.
    foreach ($node->field_ref_bullet_points[$node->language] as $nids) {
      node_delete($nids['target_id']);
    }
  }
  if ($node->type === 'bullet_point') {
    //TODO: Delete bullet attachments from meeting.
    if (isset($node->field_ref_attachment[$node->language])) {
      foreach ($node->field_ref_attachment[$node->language] as $nids) {
        node_delete($nids['target_id']);
      }
    }
  }
}

function _os2web_meetings_sanetize_filename($filename) {
  // Replace whitespace.
//  $filename = str_replace(' ', '_', $filename);
  // Remove remaining unsafe characters.
  //$filename = preg_replace('![^0-9A-Za-z_.- ]!', '', $filename);
  $filename = preg_replace('![/"]!', '-', $filename);
  // Remove multiple consecutive non-alphabetical characters.
  $filename = preg_replace('/(_)_+|(\.)\.+|(-)-+/', '\\1\\2\\3', $filename);
  // Force lowercase to prevent issues on case-insensitive file systems.
  //$filename = strtolower($filename);
  $pi = pathinfo($filename);
  if (isset($pi['extension'])) {
    return substr(trim($pi['filename']), 0, 160) . '.' . $pi['extension'];
    ;
  } else {
    return substr(trim($pi['filename']), 0, 160);
  }
}

function _os2web_meetings_clear_committees() {
  $no_publish_committee = explode(',', variable_get('os2web_meetings_invalid_committee', 'Direktionsmøde, Direktions og afdelingschef møde, Rådhusmad, Test udvalg, Traen udvalg, Nedlagte udvalg'));
  foreach ($no_publish_committee as $committee) {
    $terms = taxonomy_get_term_by_name($committee, 'committee');
    while ($term = array_shift($terms)) {
      taxonomy_term_delete($term->tid);
    }
  }
}

function _os2web_meetings_cleanup_nodes($type, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['nids'] = db_select("node", 'n')->fields('n', array('nid'))->condition('type', $type)->execute()->fetchCol();
    $context['sandbox']['max'] = count($context['sandbox']['nids']);
  }

  while ($count++ < 5 && $nid = array_shift($context['sandbox']['nids'])) {
    node_delete($nid);
  }
  $context['finished'] = 1 - count($context['sandbox']['nids']) / $context['sandbox']['max'];
  if ($context['finished'] > 1)
    $context['finished'] = 1;
}

function _os2web_meetings_import_file($filename, $folder = '.', $newname = FALSE) {
  $uri_in = implode('/', array(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), $folder, $filename));

  $pinfo = pathinfo($uri_in);
  if ($newname !== false) {
    $fname = $newname;
  } else {
    $fname = $pinfo['filename'];
  }

  $uri_out = $pinfo['dirname'] . '/' . _os2web_meetings_sanetize_filename($fname . '.' . strtolower($pinfo['extension']));
  $uri_pdf = $pinfo['dirname'] . '/' . _os2web_meetings_sanetize_filename($fname . '.pdf');

  $uri = FALSE;
  if ($uri_tmp = _os2web_meetings_similar_file_exists(drupal_realpath($uri_pdf))) {
    // we have an already converted pdf file
    $uri = $uri_pdf;
    $convert = false;
  } elseif ($uri_tmp = _os2web_meetings_similar_file_exists(drupal_realpath($uri_out))) {
    $uri_out = implode('/', array(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), $folder, basename($uri_tmp)));
    // File already copied
    $convert = true;
    $uri = $uri_out;
  } else {
    // Completely unprocessed file
    $uri_old = $uri_in;
    $uri_in = _os2web_meetings_similar_file_exists(drupal_realpath($uri_in));
    if ($uri_in === false || FALSE === file_unmanaged_copy($uri_in, $uri_out, FILE_EXISTS_REPLACE)) {
      // Bummed out on copy
      watchdog('os2web_meetings', 'File copy failed for %infile -> %outfile. Check folder permissions.', array('%infile' => $uri_old, '%outfile' => $uri_out), WATCHDOG_WARNING);
      return false;
    } else {
      $convert = true;
      $uri = $uri_out;
    }
  }

  if (false === $uri) {
    watchdog('os2web_meetings', 'Processing of %infile failed. If exists, check permissions.', array('%infile', $uri_in), WATCHDOG_WARNING);
    return false;
  }

  if (file_uri_scheme($uri) != 'public') {
    watchdog('os2web_meetings', 'Invalid scheme for uri %uri, Possibly absolut path ?', array('%uri', $uri), WATCHDOG_ERROR);
    error_log("Var: \$uri = " . print_r($uri, 1));
    error_log("Var: \$uri_in = " . print_r($uri_in, 1));
    error_log("Var: \$uri_out = " . print_r($uri_out, 1));
    error_log("Var: \$uri_pdf = " . print_r($uri_pdf, 1));
  }

  $fid = db_select('file_managed', 'fm')
          ->fields('fm', array('fid'))
          ->condition('uri', $uri)
          ->execute()->fetchField();

  $file = new stdClass();
  if ($fid) {
    $file->fid = $fid;
  }
  $file->uri = $uri;
  $file->display = 1;
  $file->field_titel[LANGUAGE_NONE][]['value'] = $newname;
  $file->filename = drupal_basename($file->uri);
  $file->filemime = file_get_mimetype($file->uri);
  $file->uid = 1;
  $file->status = FILE_STATUS_PERMANENT;
  $file = file_save($file);

  // Schedule for PDF conversion
  $convert = false; // DEBUG
  if ($convert) {
    drupal_load('module', 'os2web_adlib_api');
    os2web_adlib_api_convert_to_pdf($file->fid, $file->filename);
    watchdog('os2web_meetings', 'File , %filename (fid: %fid) queued for PDF conversion.', array('%filename' => $file->filename, '%fid' => $file->fid), WATCHDOG_INFO);
  }

//  watchdog('os2web_meetings', 'Imported file %filename (fid: %fid).', array('%filename' => $file->filename, '%fid' => $file->fid), WATCHDOG_DEBUG);
  return $file;
}
