<?php

define('DEFAULT_ACADRE_IMPORT_DIR', 'public://acadre');
define('MEETINGS_FORCE_RECREATE', false); // Delete existing nodes before import
define('MEETINGS_FOCUS', false); // File key for import
define('MEETINGS_MEETING_FOCUS', false); // Meeting id
define('MEETINGS_CLEAR_COMMITTEE', true); // Clean out invalid committees

function os2web_meetings_menu() {
  $items = array();
  $items['os2web/test/meetings/batch'] = array(
      'page callback' => 'os2web_meetings_do_import_batch',
      'access arguments' => array('administer os2web'),
      'type' => MENU_CALLBACK,
  );
  $items['os2web/test/meetings'] = array(
      'page callback' => 'os2web_meetings_test_page',
      'access arguments' => array('administer os2web'),
      'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implemetation of hook_cron()
 * Will run import on every cron.
 */
function os2web_meetings_cron() {
  $options = array(
//      'callback' => '_os2web_meetings_process_manifest',
      'recurse' => FALSE,
  );
  $files = file_scan_directory(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), '/\.xml$/i', $options);
  $queue = DrupalQueue::get('import_agendas');
  if ($queue->numberOfItems()==0) {
    foreach ($files as $file) {
      $queue->createItem($file->uri);
    }
  }
}

function os2web_meetings_cron_queue_info() {
  $queues['import_agendas'] = array(
      'worker callback' => '_os2web_meetings_process_manifest',
      'time' => 300,
      );
  return $queues;
}

/**
 * Implementation of hook_form_alter()
 */
function os2web_meetings_form_os2web_settings_settings_form_alter(&$form, &$form_state) {
  $form['meetings'] = array(
      '#type' => 'fieldset',
      '#title' => 'Referat import',
      '#description' => 'Indstillinger der vedrører importen af Acadre referater og dagsordener.',
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
  );
  $form['meetings']['os2web_meetings_path'] = array(
      '#type' => 'textfield',
      '#title' => 'Sti til acadre publish folder.',
      '#description' => 'Dette er stien hvor Acadre publisere .XML filer til.',
      '#default_value' => variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR),
  );
  $form['meetings']['os2web_meetings_invalid_committee'] = array(
      '#type' => 'textfield',
      '#title' => 'Udvalg der ikke skal importeres',
      '#description' => 'Komma sepereret liste over udvalg der ikke skal inkluderes i importen.',
      '#default_value' => variable_get('os2web_meetings_invalid_committee', 'Direktionsmøde, Direktions og afdelingschef møde, Rådhusmad, Test udvalg, Traen udvalg, Nedlagte udvalg'),
  );
}

function os2web_meetings_test_page() {
  global $debug_info;
//  $date = '2012-06-21 13:00';
//
//  $date_obj = date_create($date);
//  date_timezone_set($date_obj, timezone_open( 'UTC'));
//  $date = date_format($date_obj, 'Y-m-d H:i');
//
//  $debug_info = $date . "\n";
//  $date = strtotime($date);
//  $debug_info.= format_date($date,'medium','','Europe/Berlin');
  //$debug_info.= print_r($dateObj,1);

//  _os2web_meetings_clear_committees();
//  os2web_meetings_do_import();
//  os2web_meetings_order_addenums();

 //os2web_meetings_do_import_batch(); 
// _os2web_meetings_cleanup_nodes('meeting',$bleh);

  //return '<div><textarea cols="150" rows=50>' . print_r($debug_info, 1) . '</textarea>';
  return '<a href="/os2web/test/meetings/batch">Start import</a>';
}

/**
 * Import xml files from the defined folder
 *
 */
function os2web_meetings_do_import_batch() {
  $focus = MEETINGS_FOCUS;
  //$focus = false;
  $batch = array(
    'title' => 'Dagsorden import',
    'operations' => array(
//      array('_os2web_meetings_cleanup_nodes',array('meeting')),
//      array('_os2web_meetings_cleanup_nodes',array('bullet_point')),
//      array('_os2web_meetings_cleanup_nodes',array('bullet_point_attachment')),
    ),
    'finished' => 'os2web_meetings_order_addenums',
  );
  if (MEETINGS_CLEAR_COMMITTEE) {
    //$batch['operations'][]=array('_os2web_meetings_clear_committees',array());
  }
  $options = array(
//      'callback' => '_os2web_meetings_process_manifest',
      'recurse' => FALSE,
  );
  $files = file_scan_directory(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), '/\.xml$/i', $options);
  foreach ($files as $file) {
    if ($focus!==false) {
      if (strpos($file->name,(string) $focus)!==FALSE) {
        $batch['operations'][]=array('_os2web_meetings_process_manifest',array($file->uri));
      }
    } else {
      $batch['operations'][]=array('_os2web_meetings_process_manifest',array($file->uri));
    }
  }
  if($focus) {
    error_log("Var: \$batch = " . print_r($batch, 1));
    }
  batch_set($batch);
  batch_process('os2web/test/meetings');
}

/**
 * Import xml files from the defined folder
 *
 */
function os2web_meetings_do_import() {
  $options = array(
      'callback' => '_os2web_meetings_process_manifest',
      'recurse' => FALSE,
  );
  file_scan_directory(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), '/\.xml$/i', $options);
}

/**
 * This function will set up the addenum connections for meetings.
 *
 */
function os2web_meetings_order_addenums() {
  // Find all meetings and gather meeting and agenda_ids
  $nodes = entity_load('node', FALSE, array('type' => 'meeting'));
  $meetings = array();
  // meetings as: $meetings[<meeting_id>][<system_id>][<node_id>]
  foreach ($nodes as $node) {
    $meeting_id = array_shift(field_get_items('node',$node,'field_meeting_id'));
    $system_id = array_shift(field_get_items('node',$node,'field_system_id'));
    $meetings[$meeting_id['value']][$system_id['value']] = $node->nid;
  }
  foreach ($meetings as $m_id => $meeting) {
    ksort($meeting); // Lowest system id first
    $primary = array_shift($meeting); // Lowest system id is primary
    while ($next = array_shift($meeting)) {
      // Set up references for addenum agendas
      $node = $nodes[$next];
      $node->field_addenum_to[$node->language][0]['nid'] = $primary;
      node_save($node);
    }
  }
}

/**
 * Processes a manifest file
 * 
 * @param string $file File URI. Works as callback in file_scan_directory works.
 */
function _os2web_meetings_process_manifest($file) {
//  error_log("importing file: " . $file);
  $manifest = simplexml_load_file(drupal_realpath($file));
  $items_xml = $manifest->xpath("//table[@name='producedAgenda']/fields");
  foreach ($items_xml as $xml_item) {
    _os2web_meetings_process_agenda($xml_item);
  }
}

/**
 * Processes an agenda item
 *
 * @param SimpleXMLElement $agendainfo Chunk of XML representing the agenda part.
 */
function _os2web_meetings_process_agenda($agendainfo_xml) {
  error_log("Var: \$agendainfo_xml = " . print_r($agendainfo_xml, 1));
  $agendainfo = array(
      'sysid' => (int) array_shift($agendainfo_xml->xpath('field/@sysid')),
      'xmlFusionID' => (int) array_shift($agendainfo_xml->xpath('field/@xmlFusionID')),
      'xmlfilename' => (string) array_shift($agendainfo_xml->xpath('field/@xmlfilename')),
      'docID' => (string) array_shift($agendainfo_xml->xpath('field/@docID')),
      'docfilename' => (string) array_shift($agendainfo_xml->xpath('field/@docfilename')),
      'type' => (int) array_shift($agendainfo_xml->xpath('field/@type')),
      'comment' => (string) array_shift($agendainfo_xml->xpath('field/@comment')),
      'fileType' => (string) array_shift($agendainfo_xml->xpath('field/@fileType')),
      'access' => (string) array_shift($agendainfo_xml->xpath('field/@access')),
      'accessid' => (int) array_shift($agendainfo_xml->xpath('field/@accessid')),
      'publish' => (int) array_shift($agendainfo_xml->xpath('field/@publish')),
      'publishDate' => (string) array_shift($agendainfo_xml->xpath('field/@publishDate')),
      'createdDate' => (string) array_shift($agendainfo_xml->xpath('field/@createdDate')),
      'filesfolder' => (string) array_shift($agendainfo_xml->xpath('field/@filesfolder')),
      'casePublish' => (string) array_shift($agendainfo_xml->xpath('field/@casePublish')),
      'startDate' => (string) array_shift($agendainfo_xml->xpath('field/@startDate')),
      'endDate' => (string) array_shift($agendainfo_xml->xpath('field/@endDate'))
  );
  if ($agendainfo['publish'] === 1 && $agendainfo['access']!=='Lukket') {
  error_log("Var: \$agendainfo = " . print_r($agendainfo, 1));
    $agenda_uri = implode('/', array(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), $agendainfo['filesfolder'], $agendainfo['xmlfilename']));
    error_log("Var: \$agenda_uri = " . print_r($agenda_uri, 1));
    if (($agenda_uri = _os2web_meetings_similar_file_exists(drupal_realpath($agenda_uri))) !== FALSE) {
      $agenda_xml = simplexml_load_file(drupal_realpath($agenda_uri));
      if (!_os2web_meetings_publish_meeting($agendainfo, $agenda_xml,MEETINGS_FORCE_RECREATE)) {
        // No longer a valid import
        _os2web_meetings_unpublish_meeting($agendainfo);
      }
    }
  } else {
    _os2web_meetings_unpublish_meeting($agendainfo);
  }
}

/**
 * Removes a meeting node from the infomation supplied.
 *
 * @return bool Nid og the created node.
 * @param array $info
 */
function _os2web_meetings_unpublish_meeting($info) {
//  error_log(basename(__FILE__) . ':' . __LINE__ . ' Unpublish: $agendainfo = ' . print_r($info, 1));
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'meeting')
    ->fieldCondition('field_system_id', 'value', $info['sysid'], '=')
    ->execute();
  if (isset($result['node'])) {
    $nid = array_shift($result['node'])->nid;
    node_delete($nid);
    error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' - Unpublished nid: '.$nid);
  }
}

/**
 * Creates a meeting node from the infomation supplied.
 *
 * @return int Nid of the created node.
 * @param array $info
 * @param array $xml
 */
function _os2web_meetings_publish_meeting($info, $xml, $force = false) {
  global $debug_info;
  $debug_info = $xml;
    

  $no_publish_committee = explode(',',variable_get('os2web_meetings_invalid_committee', 'Direktionsmøde, Direktions og afdelingschef møde, Rådhusmad, Test udvalg, Traen udvalg, Nedlagte udvalg'));
  foreach ($no_publish_committee as $key => $value) {
    $no_publish_committee[$key] = trim($value);
  }


  //TODO: Look for previously imported version to update
  // Create meeting node
  // Gather info
  $options = array(
      'title' => (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field[@name='name']")),
      'date' => (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field[@name='date']")),
      'finish' => (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field[@name='finish']")),
      'location' => (string) array_shift($xml->xpath("//table[@name='location']/fields/field[@name='name']")),
      'committee' => (string) array_shift($xml->xpath("//table[@name='committee']/fields/field[@name='name']")),
      'description' => (string) array_shift($xml->xpath("//table[@name='agenda']/fields/field[@name='description']")),
      'cdate' => strtotime((string) array_shift($xml->xpath("//table[@name='agenda']/fields/field[@name='producedate']"))),
      'meeting_id' => (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field[@name='sysid']")),
      'id' => $info['sysid'],
  );
  if ($options['committee']=='' || in_array($options['committee'], $no_publish_committee)) {
    return false;
  }

  if (MEETINGS_MEETING_FOCUS) {
    if ($options['meeting_id']!=MEETINGS_MEETING_FOCUS) {
      return true;
    }
  }

  $query = new EntityFieldQuery();

  $result = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'meeting')
    ->fieldCondition('field_system_id', 'value', $options['id'], '=')
    ->execute();
  if (isset($result['node'])) {
    $nid = array_shift($result['node'])->nid;
    if ($force) {
      node_delete($nid);
      $node = new stdClass(); // We create a new node object
    } else {
      // Fix missing committee
//      if (MEETINGS_CLEAR_COMMITTEE) {
//        $node = node_load($nid);
//        $committee_term = _os2web_meetings_import_committee(array_shift($xml->xpath("//table[@name='committee']")));
//        $node->field_committee[LANGUAGE_NONE][0]['tid'] = $committee_term->tid;
//        node_save($node);
//        error_log("Updated: \$node->nid = " . print_r($node->nid, 1));
//      }
      return true;
    }
//    $node = node_load($nid);
//    foreach ($node->field_ref_bullet_points[$node->language] as $delta => $bullet) {
//      $bid = $bullet['target_id'];
//      node_delete($bid);
//    }
//    $node->field_ref_bullet_points = array();
  } else {
    $node = new stdClass(); // We create a new node object
  }
  $node->type = "meeting"; // Or any other content type you want
  $node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
  $node->uid = 1; // Or any id you wish

  $node->title = $options['title'];
  $node->path = array('alias' => 'agenda/' . $options['id']); // Setting a node path
  node_object_prepare($node); // Set some default values.

  $node->created = $options['cdate'];
  // Let's add standard body field
  $node->field_meeting_abbr[$node->language][0]['value'] = substr($options['description'],0,49);
  $node->field_meeting_abbr[$node->language][0]['format'] = 'filtered_html'; // If field has a format, you need to define it. Here we define a default filtered_html format for a body field

  // The date
  $date_obj = date_create($options['date']);
  date_timezone_set($date_obj, timezone_open( 'UTC'));
  $node->field_date[$node->language][0]['value'] = date_format($date_obj, 'Y-m-d H:i');
  $date_obj = date_create($options['finish']);
  date_timezone_set($date_obj, timezone_open( 'UTC'));
  $node->field_date[$node->language][0]['value2'] = date_format($date_obj, 'Y-m-d H:i');
  $node->field_date[$node->language][0]['timezone'] = 'Europe/Berlin';
//  $node->field_date[$node->language][0]['timezone_db'] = 'Europe/Berlin';
  $node->field_date[$node->language][0]['date_type'] = 'datetime';
  // Proper id tagging
  $node->field_meeting_id[$node->language][0]['value'] = $options['meeting_id'];
  $node->field_system_id[$node->language][0]['value'] = $options['id'];
  // Make sure the committee term is created and get the term.
  $committee_term = _os2web_meetings_import_committee(array_shift($xml->xpath("//table[@name='committee']")));
  $node->field_committee[LANGUAGE_NONE][0]['tid'] = $committee_term->tid;
  $location_term = _os2web_meetings_import_location(array_shift($xml->xpath("//table[@name='meeting']")));
  $node->field_location[LANGUAGE_NONE][0]['tid'] = $location_term->tid;

  // Add QBrick info
  $movie_id = _os2web_qbrick_get_movie_id($node);
  if ($movie_id != FALSE) {
    $info['movie_id'] = $movie_id;
    $info['movie_chapters'] = _os2web_qbrick_get_chapters($movie_id);
    $node->field_qbrick_ref[$node->language][0]['id'] = $movie_id;
    $node->field_qbrick_ref[$node->language][0]['seek'] = 0;
  } else {
    $node->field_qbrick_ref = array();
  }

  // Add full document
  $fname=$info['docfilename'];
  $folder=$info['filesfolder'];
  $file = _os2web_meetings_import_file($fname,$folder);
  if (FALSE!==$file)
    $node->field_full_doc[LANGUAGE_NONE][] = (array) $file;

  //Add nodes for each bullet
//  $items = $xml->xpath("//table[@name='agendaitem']");
  $items = $xml->xpath("//table[@name='agendaitemparents']");
  $item_nids = array();
  foreach ($items as $item) {
    $xml = array_shift($item->xpath("table[@name='agendaitem']"));
    $id = (int) array_shift($item->xpath("fields/field[@name='sort']"));
    $item_nids[] = _os2web_meetings_add_item($info, $xml, $id);
    // add node for each items
  }

  foreach ($item_nids as $nid) {
    $node->field_ref_bullet_points[$node->language][]['target_id'] = $nid;
  }

  // Add items to meeting node.
  // Save the meeting node.
  node_submit($node);
  node_save($node);
  error_log("Created: \$node->nid = " . print_r($node->nid, 1));
  //TODO: add reference to the os2web_meetings_import table
  $record = array(
      'nid' => $node->nid,
      'aid' => $options['id'],
  );
  drupal_write_record('os2web_meetings_imported', $record);
  return true;
}

function _os2web_meetings_add_item($info, $xml, $id) {
  $options = array(
      'sysid' => (int) array_shift($xml->xpath("fields/field[@name='sysid']")),
      'name' => (string) array_shift($xml->xpath("fields/field[@name='name']")),
      'access' => (string) array_shift($xml->xpath("fields/field[@name='accessname']")),
  );
  $closed = $options['access']==='Lukket';

  $node = new stdClass();
  $node->type = "bullet_point"; // Or any other content type you want
  $node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
  $node->uid = 1; // Or any id you wish
  $node->title = 'Punkt ' . $id . ' ' . $options['name'];
  node_object_prepare($node); // Set some default values.

  if ($closed) {
     $node->field_bul_point_closed[LANGUAGE_NONE][]['value'] = 0;
     node_submit($node);
     node_save($node);

     return $node->nid;
  } // else....

     $node->field_bul_point_closed[LANGUAGE_NONE][]['value'] = 1;

  // Gather the bullets for the item
  $bullets = $xml->xpath("table[@name='bullet']");
  $nids = array();
  foreach ($bullets as $bullet) {
//    $bullet_id = (int) array_shift($bullet->xpath("fields/field[@name='sysid']"));
    // Add node for each bullet
    $nid = _os2web_meetings_add_bullet($bullet);
    if ($nid!==FALSE) {
      $nids[] = $nid;
    }
  }

  if (isset($info['movie_id']) && is_numeric($info['movie_chapters'][$id])) {
    $node->field_qbrick_ref[$node->language][0]['id'] = $info['movie_id'];
    $node->field_qbrick_ref[$node->language][0]['seek'] = $info['movie_chapters'][$id];
  }

  foreach ($nids as $nid) {
    $node->field_ref_attachment[LANGUAGE_NONE][]['target_id'] = $nid;
  }

  //TODO: Gather enclosures
  $enclosures = $xml->xpath("table[@name='enclosure']");
  foreach ($enclosures as $enclosure) {
    $filename_in = (string) array_shift($enclosure->xpath("fields/field[@name='filename']"));
    $title = (string) array_shift($enclosure->xpath("fields/field[@name='name']"));

    $file = _os2web_meetings_import_file($filename_in, $info['filesfolder'], $title); 
    if (FALSE!==$file)
      $node->field_enclosures[$node->language][] = (array) $file;
  }
  node_submit($node);
  node_save($node);

  return $node->nid;
}

/**
 * Creates a bullet node from xml input
 *
 * @param SimpleXMLElement $xml
 * @return int - Node ID
 */
function _os2web_meetings_add_bullet(SimpleXMLElement $xml) {

  $options = array(
      'sysid' => (int) array_shift($xml->xpath("fields/field[@name='sysid']")),
      'name' => (string) array_shift($xml->xpath("fields/field[@name='bulletname']")),
      'content' => (string) array_shift($xml->xpath("fields/field[@name='bulletcontent']")),
      'type' => (int) array_shift($xml->xpath("fields/field[@name='bullettype']")),
      'weight' => (int) array_shift($xml->xpath("fields/field[@name='bulletsortorder']")),
      'lastbullet' => (int) array_shift($xml->xpath("fields/field[@name='lastbullet']")),
  );
  if ($options['content']==='') {
    return FALSE;
  }
  $node = new stdClass();
  $node->type = "bullet_point_attachment"; // Or any other content type you want
  $node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
  $node->uid = 1; // Or any id you wish

  $node->title = $options['name'];

  node_object_prepare($node); // Set some default values.
  // Let's add standard body field
  $node->field_bpa_body[$node->language][0]['value'] = $options['content'];
  $node->field_bpa_body[$node->language][0]['format'] = 'filtered_html'; // If field has a format, you need to define it. Here we define a default filtered_html format for a body field
//  $node->field_weight[LANGUAGE_NONE][0]['value'] = $options['weight'];

  node_submit($node);
  node_save($node);

  return $node->nid;
}

/**
 * Processes xml for committee and creates terms as needed.
 *
 * @param SimpleXMLElement $xml
 * @return \stdClass 
 */
function _os2web_meetings_import_committee(SimpleXMLElement $xml) {
  //TODO: Process members of the committee.
  //FIXME: MAke vocab name configurable.
  $vid = db_select('taxonomy_vocabulary', 'tv')
      ->fields('tv', array('vid'))
      ->condition('machine_name', 'committee')
      ->execute()
      ->fetchField();

  $term = new stdClass();
  $term->vid = $vid;
  $term->name = (string) array_shift($xml->xpath("fields/field[@name='name']"));
  $term->description = (string) array_shift($xml->xpath("fields/field[@name='description']"));
  $term->field_department_id[LANGUAGE_NONE][0]['value'] = (int) array_shift($xml->xpath("fields/field[@name='deptid']"));
  $term->field_department_name[LANGUAGE_NONE][0]['value'] = (string) array_shift($xml->xpath("fields/field[@name='departmentName']"));

  $tid = db_select('taxonomy_term_data', 'td')
          ->fields('td', array('tid'))
          ->condition('name', $term->name)
          ->condition('vid', $term->vid)
          ->execute()->fetchObject();

  if (isset($tid->tid) && $tid->tid > 0) {
    $term->tid = (int) $tid->tid;
  }
  taxonomy_term_save($term);

  return $term;
}

/**
 * Processes xml for location and creates terms as needed.
 *
 * @param SimpleXMLElement $xml
 * @return \stdClass
 */
function _os2web_meetings_import_location(SimpleXMLElement $xml) {
  //TODO: Process members of the committee.
  //FIXME: MAke vocab name configurable.
  $vid = db_select('taxonomy_vocabulary', 'tv')
      ->fields('tv', array('vid'))
      ->condition('machine_name', 'lokation')
      ->execute()
      ->fetchField();

  $term = new stdClass();
  $term->vid = $vid;
  $term->name = (string) array_shift($xml->xpath("fields/field[@name='location']"));
  $term->description = (string) array_shift($xml->xpath("fields/field[@name='address']"));

  $tid = db_select('taxonomy_term_data', 'td')
          ->fields('td', array('tid'))
          ->condition('name', $term->name)
          ->condition('vid', $term->vid)
          ->execute()->fetchObject();

  if (isset($tid->tid) && $tid->tid > 0) {
    $term->tid = (int) $tid->tid;
  }
  taxonomy_term_save($term);

  //error_log(basename(__FILE__) . ':' . __LINE__ . ' Var: $term = ' . print_r($term, 1));
  return $term;
}

/**
 * Case insensitive fileexists(). Code from comments on php.net
 *
 * @param string $filename
 * @return mixed Flase if file not found, case corrected filename if found.
 */
function _os2web_meetings_similar_file_exists($filename) {
  if (file_exists($filename)) {
    return $filename;
  }
  $dir = dirname($filename);
  $files = glob($dir . '/*');
  $lcaseFilename = strtolower($filename);
  foreach ($files as $file) {
    if (strtolower($file) == $lcaseFilename) {
      return $file;
    }
  }
  return false;
}

function os2web_meetings_node_delete($node) {
  if ($node->type === 'meeting') {
    db_delete('os2web_meetings_imported')->condition('nid', $node->nid)->execute();
    //TODO: Delete bullets from meeting.
    foreach ($node->field_ref_bullet_points[$node->language] as $nids) {
      node_delete($nids['target_id']);
    }
  }
  if ($node->type === 'bullet_point') {
    //TODO: Delete bullet attachments from meeting.
    if (isset($node->field_ref_attachment[$node->language])) {
      foreach ($node->field_ref_attachment[$node->language] as $nids) {
        node_delete($nids['target_id']);
      }
    }
  }
}

function _os2web_meetings_sanetize_filename($filename) {
  // Replace whitespace.
//  $filename = str_replace(' ', '_', $filename);
  // Remove remaining unsafe characters.
  //$filename = preg_replace('![^0-9A-Za-z_.- ]!', '', $filename);
  $filename = preg_replace('![/]!', '-', $filename);
  // Remove multiple consecutive non-alphabetical characters.
  $filename = preg_replace('/(_)_+|(\.)\.+|(-)-+/', '\\1\\2\\3', $filename);
  // Force lowercase to prevent issues on case-insensitive file systems.
  //$filename = strtolower($filename);
  return $filename;
  }

function _os2web_meetings_clear_committees() {
  $no_publish_committee = explode(',',variable_get('os2web_meetings_invalid_committee', 'Direktionsmøde, Direktions og afdelingschef møde, Rådhusmad, Test udvalg, Traen udvalg, Nedlagte udvalg'));
  foreach ($no_publish_committee as $committee) {
    $terms = taxonomy_get_term_by_name($committee,'committee');
    while ($term = array_shift($terms)) {
      taxonomy_term_delete($term->tid);
    }
  }
}

function _os2web_meetings_cleanup_nodes($type,&$context) {
  if (!isset($context['sandbox']['progress'])) {
     $context['sandbox']['nids'] =  db_select("node",'n')->fields('n',array('nid'))->condition('type',$type)->execute()->fetchCol();
     $context['sandbox']['max'] = count($context['sandbox']['nids']);
   }
  
  while ($count++ < 5 && $nid=array_shift($context['sandbox']['nids'])) {
    node_delete($nid);
  }
  $context['finished'] = 1-count($context['sandbox']['nids']) / $context['sandbox']['max'];
  if ($context['finished']>1) $context['finished']=1;
}

function _os2web_meetings_import_file($filename, $folder = '.', $newname = FALSE) {
  $uri_in = implode('/', array(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), $folder, $filename));

    $pinfo = pathinfo($uri_in);
    if ($newname!==false) {
      $fname = $newname;
    } else {
      $fname = $pinfo['filename'];
    }
    $fname = _os2web_meetings_sanetize_filename($fname);
    $uri_out = $pinfo['dirname'].'/'.$fname.'.'.strtolower($pinfo['extension']);
    $uri_pdf = $pinfo['dirname'].'/'.$fname.'.pdf';

    if ($uri_tmp = _os2web_meetings_similar_file_exists(drupal_realpath($uri_pdf))) {
      // we have an already converted pdf file
      $uri = $uri_tmp;
      $convert =false;
    } elseif ($uri_tmp = _os2web_meetings_similar_file_exists(drupal_realpath($uri_out))) {
      $uri_out = implode('/', array(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), $folder, basename($uri_tmp)));
      // File already copied
      $convert = true;
      $uri = $uri_out;
    } else {
      // Completely unprocessed file
      $uri_in = _os2web_meetings_similar_file_exists(drupal_realpath($uri_in));
      if ($uri_in!==false && FALSE===file_unmanaged_copy($uri_in,$uri_out,FILE_EXISTS_OVERWRITE)) {
        // Bummed out on copy
        error_log('File copy failed for file: '.$uri_in);
        error_log('Destination: '.$uri_out);
        error_log('File skipped ');
        return false;
      } else {
        $convert = true;
        $uri = _os2web_meetings_similar_file_exists(drupal_realpath($uri_out));
      }
    }



    $fid = db_select('file_managed', 'fm')
            ->fields('fm', array('fid'))
            ->condition('uri', $uri)
            ->execute()->fetchField();

    $file = new stdClass();
    if ($fid) {
      $file->fid = $fid;
    }
    $file->uri = $uri;
    $file->display = 1;
    $file->field_titel[LANGUAGE_NONE][]['value'] = $newname;
    $file->filename = drupal_basename($file->uri);
    $file->filemime = file_get_mimetype($file->uri);
    $file->uid = 1;
    $file->status = FILE_STATUS_PERMANENT;
    $file = file_save($file);

    // Schedule for PDF conversion
    if ($convert) {
      drupal_load('module','os2web_adlib_api');
      os2web_adlib_api_convert_to_pdf($file->fid,$file->filename);
    }

  return $file;
}
